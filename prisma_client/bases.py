# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template models.py.jinja --
from pydantic import BaseModel

from . import fields, actions
from ._types import FuncType
from ._builder import serialize_base64
from ._compat import PYDANTIC_V2, ConfigDict

if TYPE_CHECKING:
    from .client import Prisma


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class _PrismaModel(BaseModel):
    if PYDANTIC_V2:
        model_config: ClassVar[ConfigDict] = ConfigDict(
            use_enum_values=True,
            arbitrary_types_allowed=True,
            populate_by_name=True,
        )
    elif not TYPE_CHECKING:
        from ._compat import BaseConfig

        class Config(BaseConfig):
            use_enum_values: bool = True
            arbitrary_types_allowed: bool = True
            allow_population_by_field_name: bool = True
            json_encoders: Dict[Any, FuncType] = {
                fields.Base64: serialize_base64,
            }

    # TODO: ensure this is required by subclasses
    __prisma_model__: ClassVar[str]


class BaseUser(_PrismaModel):
    __prisma_model__: ClassVar[Literal['User']] = 'User'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserActions[_PrismaModelT](client or get_client(), cls)


class BaseTodoCategory(_PrismaModel):
    __prisma_model__: ClassVar[Literal['TodoCategory']] = 'TodoCategory'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.TodoCategoryActions[_PrismaModelT]':
        from .client import get_client

        return actions.TodoCategoryActions[_PrismaModelT](client or get_client(), cls)


class BaseTodo(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Todo']] = 'Todo'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.TodoActions[_PrismaModelT]':
        from .client import get_client

        return actions.TodoActions[_PrismaModelT](client or get_client(), cls)


class BaseCoinTransaction(_PrismaModel):
    __prisma_model__: ClassVar[Literal['CoinTransaction']] = 'CoinTransaction'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.CoinTransactionActions[_PrismaModelT]':
        from .client import get_client

        return actions.CoinTransactionActions[_PrismaModelT](client or get_client(), cls)


class BaseReward(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Reward']] = 'Reward'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.RewardActions[_PrismaModelT]':
        from .client import get_client

        return actions.RewardActions[_PrismaModelT](client or get_client(), cls)


class BaseRewardRedemption(_PrismaModel):
    __prisma_model__: ClassVar[Literal['RewardRedemption']] = 'RewardRedemption'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.RewardRedemptionActions[_PrismaModelT]':
        from .client import get_client

        return actions.RewardRedemptionActions[_PrismaModelT](client or get_client(), cls)


class BaseAchievement(_PrismaModel):
    __prisma_model__: ClassVar[Literal['Achievement']] = 'Achievement'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.AchievementActions[_PrismaModelT]':
        from .client import get_client

        return actions.AchievementActions[_PrismaModelT](client or get_client(), cls)


class BaseUserAchievement(_PrismaModel):
    __prisma_model__: ClassVar[Literal['UserAchievement']] = 'UserAchievement'  # pyright: ignore[reportIncompatibleVariableOverride]

    @classmethod
    def prisma(cls: Type[_PrismaModelT], client: Optional['Prisma'] = None) -> 'actions.UserAchievementActions[_PrismaModelT]':
        from .client import get_client

        return actions.UserAchievementActions[_PrismaModelT](client or get_client(), cls)


