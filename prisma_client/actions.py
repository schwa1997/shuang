# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class UserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.User]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await User.prisma().query_raw(
            'SELECT * FROM User WHERE user_id = $1',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.User
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().query_first(
            'SELECT * FROM User WHERE username = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = await User.prisma().create(
            data={
                # data to create a User record
                'username': 'ggciceaie',
                'email': 'bbehjachib',
                'password_hash': 'cadfabfehe',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'username': 'dgiiaaijj',
                    'email': 'bfaiacjjfc',
                    'password_hash': 'eigcfgbif',
                },
                {
                    # data to create a User record
                    'username': 'bagcfbhiig',
                    'email': 'cghideieh',
                    'password_hash': 'biabhbdai',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().delete(
            where={
                'user_id': 836760821,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique(
            where={
                'user_id': 595337866,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Find a unique User record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique_or_raise(
            where={
                'user_id': 790425851,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = await User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the email field
        users = await User.prisma().find_many(
            take=5,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the password_hash field
        user = await User.prisma().find_first(
            skip=1,
            order={
                'password_hash': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single User record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the total_coins field
        user = await User.prisma().find_first_or_raise(
            skip=1,
            order={
                'total_coins': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().update(
            where={
                'user_id': 2111915288,
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().upsert(
            where={
                'user_id': 1149758321,
            },
            data={
                'create': {
                    'user_id': 1149758321,
                    'username': 'bagcfbhiig',
                    'email': 'cghideieh',
                    'password_hash': 'biabhbdai',
                },
                'update': {
                    'username': 'bagcfbhiig',
                    'email': 'cghideieh',
                    'password_hash': 'biabhbdai',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = await User.prisma().update_many(
            data={
                'streak_count': 1644289366
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'last_active_date': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> types.UserCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'user_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = await User.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserScalarFieldKeys'],
        *,
        where: Optional['types.UserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAvgAggregateInput'] = None,
        sum: Optional['types.UserSumAggregateInput'] = None,
        min: Optional['types.UserMinAggregateInput'] = None,
        max: Optional['types.UserMaxAggregateInput'] = None,
        having: Optional['types.UserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by username values
        # and count how many records are in each group
        results = await User.prisma().group_by(
            ['username'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class TodoCategoryActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.TodoCategory]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await TodoCategory.prisma().query_raw(
            'SELECT * FROM TodoCategory WHERE category_id = $1',
            1388290519,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.TodoCategory
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await TodoCategory.prisma().query_first(
            'SELECT * FROM TodoCategory WHERE category_name = $1',
            'bgehebiafc',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.TodoCategoryCreateInput,
        include: Optional[types.TodoCategoryInclude] = None
    ) -> _PrismaModelT:
        """Create a new TodoCategory record.

        Parameters
        ----------
        data
            TodoCategory record data
        include
            Specifies which relations should be loaded on the returned TodoCategory model

        Returns
        -------
        prisma.models.TodoCategory
            The created TodoCategory record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a TodoCategory record from just the required fields
        todocategory = await TodoCategory.prisma().create(
            data={
                # data to create a TodoCategory record
                'category_name': 'bghffegacj',
                'user_id': 1767274722,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.TodoCategoryCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple TodoCategory records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of TodoCategory record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await TodoCategory.prisma().create_many(
            data=[
                {
                    # data to create a TodoCategory record
                    'category_name': 'dcgchcbbf',
                    'user_id': 1343201072,
                },
                {
                    # data to create a TodoCategory record
                    'category_name': 'ghfhiafcb',
                    'user_id': 744964398,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.TodoCategoryWhereUniqueInput,
        include: Optional[types.TodoCategoryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single TodoCategory record.

        Parameters
        ----------
        where
            TodoCategory filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned TodoCategory model

        Returns
        -------
        prisma.models.TodoCategory
            The deleted TodoCategory record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        todocategory = await TodoCategory.prisma().delete(
            where={
                'category_id': 1969681615,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.TodoCategoryWhereUniqueInput,
        include: Optional[types.TodoCategoryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique TodoCategory record.

        Parameters
        ----------
        where
            TodoCategory filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned TodoCategory model

        Returns
        -------
        prisma.models.TodoCategory
            The found TodoCategory record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        todocategory = await TodoCategory.prisma().find_unique(
            where={
                'category_id': 1116175964,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.TodoCategoryWhereUniqueInput,
        include: Optional[types.TodoCategoryInclude] = None
    ) -> _PrismaModelT:
        """Find a unique TodoCategory record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            TodoCategory filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned TodoCategory model

        Returns
        -------
        prisma.models.TodoCategory
            The found TodoCategory record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        todocategory = await TodoCategory.prisma().find_unique_or_raise(
            where={
                'category_id': 861472101,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TodoCategoryWhereInput] = None,
        cursor: Optional[types.TodoCategoryWhereUniqueInput] = None,
        include: Optional[types.TodoCategoryInclude] = None,
        order: Optional[Union[types.TodoCategoryOrderByInput, List[types.TodoCategoryOrderByInput]]] = None,
        distinct: Optional[List[types.TodoCategoryScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple TodoCategory records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of TodoCategory records returned
        skip
            Ignore the first N results
        where
            TodoCategory filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned TodoCategory model
        order
            Order the returned TodoCategory records by any field
        distinct
            Filter TodoCategory records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.TodoCategory]
            The list of all TodoCategory records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 TodoCategory records
        todocategorys = await TodoCategory.prisma().find_many(take=10)

        # find the first 5 TodoCategory records ordered by the difficulty_multiplier field
        todocategorys = await TodoCategory.prisma().find_many(
            take=5,
            order={
                'difficulty_multiplier': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TodoCategoryWhereInput] = None,
        cursor: Optional[types.TodoCategoryWhereUniqueInput] = None,
        include: Optional[types.TodoCategoryInclude] = None,
        order: Optional[Union[types.TodoCategoryOrderByInput, List[types.TodoCategoryOrderByInput]]] = None,
        distinct: Optional[List[types.TodoCategoryScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single TodoCategory record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            TodoCategory filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned TodoCategory model
        order
            Order the returned TodoCategory records by any field
        distinct
            Filter TodoCategory records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.TodoCategory
            The first TodoCategory record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second TodoCategory record ordered by the user_id field
        todocategory = await TodoCategory.prisma().find_first(
            skip=1,
            order={
                'user_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TodoCategoryWhereInput] = None,
        cursor: Optional[types.TodoCategoryWhereUniqueInput] = None,
        include: Optional[types.TodoCategoryInclude] = None,
        order: Optional[Union[types.TodoCategoryOrderByInput, List[types.TodoCategoryOrderByInput]]] = None,
        distinct: Optional[List[types.TodoCategoryScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single TodoCategory record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            TodoCategory filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned TodoCategory model
        order
            Order the returned TodoCategory records by any field
        distinct
            Filter TodoCategory records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.TodoCategory
            The first TodoCategory record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second TodoCategory record ordered by the category_id field
        todocategory = await TodoCategory.prisma().find_first_or_raise(
            skip=1,
            order={
                'category_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.TodoCategoryUpdateInput,
        where: types.TodoCategoryWhereUniqueInput,
        include: Optional[types.TodoCategoryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single TodoCategory record.

        Parameters
        ----------
        data
            TodoCategory record data specifying what to update
        where
            TodoCategory filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned TodoCategory model

        Returns
        -------
        prisma.models.TodoCategory
            The updated TodoCategory record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        todocategory = await TodoCategory.prisma().update(
            where={
                'category_id': 1303003706,
            },
            data={
                # data to update the TodoCategory record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.TodoCategoryWhereUniqueInput,
        data: types.TodoCategoryUpsertInput,
        include: Optional[types.TodoCategoryInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            TodoCategory filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned TodoCategory model

        Returns
        -------
        prisma.models.TodoCategory
            The created or updated TodoCategory record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        todocategory = await TodoCategory.prisma().upsert(
            where={
                'category_id': 1686638315,
            },
            data={
                'create': {
                    'category_id': 1686638315,
                    'category_name': 'ghfhiafcb',
                    'user_id': 744964398,
                },
                'update': {
                    'category_name': 'ghfhiafcb',
                    'user_id': 744964398,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.TodoCategoryUpdateManyMutationInput,
        where: types.TodoCategoryWhereInput,
    ) -> int:
        """Update multiple TodoCategory records

        Parameters
        ----------
        data
            TodoCategory data to update the selected TodoCategory records to
        where
            Filter to select the TodoCategory records to update

        Returns
        -------
        int
            The total number of TodoCategory records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all TodoCategory records
        total = await TodoCategory.prisma().update_many(
            data={
                'category_name': 'caaaedabfc'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TodoCategoryWhereInput] = None,
        cursor: Optional[types.TodoCategoryWhereUniqueInput] = None,
    ) -> int:
        """Count the number of TodoCategory records present in the database

        Parameters
        ----------
        select
            Select the TodoCategory fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            TodoCategory filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TodoCategoryCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await TodoCategory.prisma().count()

        # results: prisma.types.TodoCategoryCountAggregateOutput
        results = await TodoCategory.prisma().count(
            select={
                '_all': True,
                'difficulty_multiplier': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.TodoCategoryCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TodoCategoryWhereInput] = None,
        cursor: Optional[types.TodoCategoryWhereUniqueInput] = None,
    ) -> types.TodoCategoryCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.TodoCategoryCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TodoCategoryWhereInput] = None,
        cursor: Optional[types.TodoCategoryWhereUniqueInput] = None,
    ) -> Union[int, types.TodoCategoryCountAggregateOutput]:
        """Count the number of TodoCategory records present in the database

        Parameters
        ----------
        select
            Select the TodoCategory fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            TodoCategory filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TodoCategoryCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await TodoCategory.prisma().count()

        # results: prisma.types.TodoCategoryCountAggregateOutput
        results = await TodoCategory.prisma().count(
            select={
                '_all': True,
                'user_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.TodoCategoryCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.TodoCategoryWhereInput] = None
    ) -> int:
        """Delete multiple TodoCategory records.

        Parameters
        ----------
        where
            Optional TodoCategory filter to find the records to be deleted

        Returns
        -------
        int
            The total number of TodoCategory records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all TodoCategory records
        total = await TodoCategory.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.TodoCategoryScalarFieldKeys'],
        *,
        where: Optional['types.TodoCategoryWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.TodoCategoryAvgAggregateInput'] = None,
        sum: Optional['types.TodoCategorySumAggregateInput'] = None,
        min: Optional['types.TodoCategoryMinAggregateInput'] = None,
        max: Optional['types.TodoCategoryMaxAggregateInput'] = None,
        having: Optional['types.TodoCategoryScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.TodoCategoryCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.TodoCategoryScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.TodoCategoryScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.TodoCategoryGroupByOutput']:
        """Group TodoCategory records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar TodoCategory fields to group records by
        where
            TodoCategory filter to select records
        take
            Limit the maximum number of TodoCategory records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.TodoCategoryGroupByOutput]
            A list of dictionaries representing the TodoCategory record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group TodoCategory records by category_id values
        # and count how many records are in each group
        results = await TodoCategory.prisma().group_by(
            ['category_id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class TodoActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Todo]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Todo.prisma().query_raw(
            'SELECT * FROM Todo WHERE todo_id = $1',
            1868141281,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Todo
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Todo.prisma().query_first(
            'SELECT * FROM Todo WHERE user_id = $1',
            1860847622,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.TodoCreateInput,
        include: Optional[types.TodoInclude] = None
    ) -> _PrismaModelT:
        """Create a new Todo record.

        Parameters
        ----------
        data
            Todo record data
        include
            Specifies which relations should be loaded on the returned Todo model

        Returns
        -------
        prisma.models.Todo
            The created Todo record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Todo record from just the required fields
        todo = await Todo.prisma().create(
            data={
                # data to create a Todo record
                'user_id': 1448521415,
                'title': 'bgcigfahea',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.TodoCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Todo records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Todo record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Todo.prisma().create_many(
            data=[
                {
                    # data to create a Todo record
                    'user_id': 1249606685,
                    'title': 'idfjadbcc',
                },
                {
                    # data to create a Todo record
                    'user_id': 763719779,
                    'title': 'ecjjjfbae',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.TodoWhereUniqueInput,
        include: Optional[types.TodoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Todo record.

        Parameters
        ----------
        where
            Todo filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Todo model

        Returns
        -------
        prisma.models.Todo
            The deleted Todo record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        todo = await Todo.prisma().delete(
            where={
                'todo_id': 1775811865,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.TodoWhereUniqueInput,
        include: Optional[types.TodoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Todo record.

        Parameters
        ----------
        where
            Todo filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Todo model

        Returns
        -------
        prisma.models.Todo
            The found Todo record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        todo = await Todo.prisma().find_unique(
            where={
                'todo_id': 893145566,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.TodoWhereUniqueInput,
        include: Optional[types.TodoInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Todo record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Todo filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Todo model

        Returns
        -------
        prisma.models.Todo
            The found Todo record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        todo = await Todo.prisma().find_unique_or_raise(
            where={
                'todo_id': 995405759,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TodoWhereInput] = None,
        cursor: Optional[types.TodoWhereUniqueInput] = None,
        include: Optional[types.TodoInclude] = None,
        order: Optional[Union[types.TodoOrderByInput, List[types.TodoOrderByInput]]] = None,
        distinct: Optional[List[types.TodoScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Todo records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Todo records returned
        skip
            Ignore the first N results
        where
            Todo filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Todo model
        order
            Order the returned Todo records by any field
        distinct
            Filter Todo records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Todo]
            The list of all Todo records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Todo records
        todos = await Todo.prisma().find_many(take=10)

        # find the first 5 Todo records ordered by the title field
        todos = await Todo.prisma().find_many(
            take=5,
            order={
                'title': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TodoWhereInput] = None,
        cursor: Optional[types.TodoWhereUniqueInput] = None,
        include: Optional[types.TodoInclude] = None,
        order: Optional[Union[types.TodoOrderByInput, List[types.TodoOrderByInput]]] = None,
        distinct: Optional[List[types.TodoScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Todo record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Todo filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Todo model
        order
            Order the returned Todo records by any field
        distinct
            Filter Todo records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Todo
            The first Todo record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Todo record ordered by the description field
        todo = await Todo.prisma().find_first(
            skip=1,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TodoWhereInput] = None,
        cursor: Optional[types.TodoWhereUniqueInput] = None,
        include: Optional[types.TodoInclude] = None,
        order: Optional[Union[types.TodoOrderByInput, List[types.TodoOrderByInput]]] = None,
        distinct: Optional[List[types.TodoScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Todo record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Todo filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Todo model
        order
            Order the returned Todo records by any field
        distinct
            Filter Todo records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Todo
            The first Todo record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Todo record ordered by the due_date field
        todo = await Todo.prisma().find_first_or_raise(
            skip=1,
            order={
                'due_date': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.TodoUpdateInput,
        where: types.TodoWhereUniqueInput,
        include: Optional[types.TodoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Todo record.

        Parameters
        ----------
        data
            Todo record data specifying what to update
        where
            Todo filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Todo model

        Returns
        -------
        prisma.models.Todo
            The updated Todo record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        todo = await Todo.prisma().update(
            where={
                'todo_id': 2102736524,
            },
            data={
                # data to update the Todo record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.TodoWhereUniqueInput,
        data: types.TodoUpsertInput,
        include: Optional[types.TodoInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Todo filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Todo model

        Returns
        -------
        prisma.models.Todo
            The created or updated Todo record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        todo = await Todo.prisma().upsert(
            where={
                'todo_id': 271520213,
            },
            data={
                'create': {
                    'todo_id': 271520213,
                    'user_id': 763719779,
                    'title': 'ecjjjfbae',
                },
                'update': {
                    'user_id': 763719779,
                    'title': 'ecjjjfbae',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.TodoUpdateManyMutationInput,
        where: types.TodoWhereInput,
    ) -> int:
        """Update multiple Todo records

        Parameters
        ----------
        data
            Todo data to update the selected Todo records to
        where
            Filter to select the Todo records to update

        Returns
        -------
        int
            The total number of Todo records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Todo records
        total = await Todo.prisma().update_many(
            data={
                'base_coin_value': 456633834
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TodoWhereInput] = None,
        cursor: Optional[types.TodoWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Todo records present in the database

        Parameters
        ----------
        select
            Select the Todo fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Todo filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TodoCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Todo.prisma().count()

        # results: prisma.types.TodoCountAggregateOutput
        results = await Todo.prisma().count(
            select={
                '_all': True,
                'completed': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.TodoCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TodoWhereInput] = None,
        cursor: Optional[types.TodoWhereUniqueInput] = None,
    ) -> types.TodoCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.TodoCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TodoWhereInput] = None,
        cursor: Optional[types.TodoWhereUniqueInput] = None,
    ) -> Union[int, types.TodoCountAggregateOutput]:
        """Count the number of Todo records present in the database

        Parameters
        ----------
        select
            Select the Todo fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Todo filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TodoCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Todo.prisma().count()

        # results: prisma.types.TodoCountAggregateOutput
        results = await Todo.prisma().count(
            select={
                '_all': True,
                'completion_date': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.TodoCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.TodoWhereInput] = None
    ) -> int:
        """Delete multiple Todo records.

        Parameters
        ----------
        where
            Optional Todo filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Todo records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Todo records
        total = await Todo.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.TodoScalarFieldKeys'],
        *,
        where: Optional['types.TodoWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.TodoAvgAggregateInput'] = None,
        sum: Optional['types.TodoSumAggregateInput'] = None,
        min: Optional['types.TodoMinAggregateInput'] = None,
        max: Optional['types.TodoMaxAggregateInput'] = None,
        having: Optional['types.TodoScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.TodoCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.TodoScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.TodoScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.TodoGroupByOutput']:
        """Group Todo records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Todo fields to group records by
        where
            Todo filter to select records
        take
            Limit the maximum number of Todo records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.TodoGroupByOutput]
            A list of dictionaries representing the Todo record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Todo records by category_id values
        # and count how many records are in each group
        results = await Todo.prisma().group_by(
            ['category_id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class CoinTransactionActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.CoinTransaction]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await CoinTransaction.prisma().query_raw(
            'SELECT * FROM CoinTransaction WHERE transaction_id = $1',
            2058258651,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.CoinTransaction
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await CoinTransaction.prisma().query_first(
            'SELECT * FROM CoinTransaction WHERE user_id = $1',
            1583689592,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.CoinTransactionCreateInput,
        include: Optional[types.CoinTransactionInclude] = None
    ) -> _PrismaModelT:
        """Create a new CoinTransaction record.

        Parameters
        ----------
        data
            CoinTransaction record data
        include
            Specifies which relations should be loaded on the returned CoinTransaction model

        Returns
        -------
        prisma.models.CoinTransaction
            The created CoinTransaction record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a CoinTransaction record from just the required fields
        cointransaction = await CoinTransaction.prisma().create(
            data={
                # data to create a CoinTransaction record
                'user_id': 878442065,
                'amount': 1675280054,
                'transaction_type': enums.TransactionType.TASK_COMPLETION,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.CoinTransactionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple CoinTransaction records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of CoinTransaction record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await CoinTransaction.prisma().create_many(
            data=[
                {
                    # data to create a CoinTransaction record
                    'user_id': 1627576247,
                    'amount': 2054802212,
                    'transaction_type': enums.TransactionType.TASK_COMPLETION,
                },
                {
                    # data to create a CoinTransaction record
                    'user_id': 60335757,
                    'amount': 684462146,
                    'transaction_type': enums.TransactionType.TASK_COMPLETION,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.CoinTransactionWhereUniqueInput,
        include: Optional[types.CoinTransactionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single CoinTransaction record.

        Parameters
        ----------
        where
            CoinTransaction filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned CoinTransaction model

        Returns
        -------
        prisma.models.CoinTransaction
            The deleted CoinTransaction record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        cointransaction = await CoinTransaction.prisma().delete(
            where={
                'transaction_id': 1625503827,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.CoinTransactionWhereUniqueInput,
        include: Optional[types.CoinTransactionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique CoinTransaction record.

        Parameters
        ----------
        where
            CoinTransaction filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned CoinTransaction model

        Returns
        -------
        prisma.models.CoinTransaction
            The found CoinTransaction record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        cointransaction = await CoinTransaction.prisma().find_unique(
            where={
                'transaction_id': 521827728,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.CoinTransactionWhereUniqueInput,
        include: Optional[types.CoinTransactionInclude] = None
    ) -> _PrismaModelT:
        """Find a unique CoinTransaction record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            CoinTransaction filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned CoinTransaction model

        Returns
        -------
        prisma.models.CoinTransaction
            The found CoinTransaction record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        cointransaction = await CoinTransaction.prisma().find_unique_or_raise(
            where={
                'transaction_id': 1266032265,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CoinTransactionWhereInput] = None,
        cursor: Optional[types.CoinTransactionWhereUniqueInput] = None,
        include: Optional[types.CoinTransactionInclude] = None,
        order: Optional[Union[types.CoinTransactionOrderByInput, List[types.CoinTransactionOrderByInput]]] = None,
        distinct: Optional[List[types.CoinTransactionScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple CoinTransaction records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of CoinTransaction records returned
        skip
            Ignore the first N results
        where
            CoinTransaction filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned CoinTransaction model
        order
            Order the returned CoinTransaction records by any field
        distinct
            Filter CoinTransaction records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.CoinTransaction]
            The list of all CoinTransaction records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 CoinTransaction records
        cointransactions = await CoinTransaction.prisma().find_many(take=10)

        # find the first 5 CoinTransaction records ordered by the amount field
        cointransactions = await CoinTransaction.prisma().find_many(
            take=5,
            order={
                'amount': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CoinTransactionWhereInput] = None,
        cursor: Optional[types.CoinTransactionWhereUniqueInput] = None,
        include: Optional[types.CoinTransactionInclude] = None,
        order: Optional[Union[types.CoinTransactionOrderByInput, List[types.CoinTransactionOrderByInput]]] = None,
        distinct: Optional[List[types.CoinTransactionScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single CoinTransaction record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            CoinTransaction filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned CoinTransaction model
        order
            Order the returned CoinTransaction records by any field
        distinct
            Filter CoinTransaction records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.CoinTransaction
            The first CoinTransaction record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second CoinTransaction record ordered by the transaction_type field
        cointransaction = await CoinTransaction.prisma().find_first(
            skip=1,
            order={
                'transaction_type': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CoinTransactionWhereInput] = None,
        cursor: Optional[types.CoinTransactionWhereUniqueInput] = None,
        include: Optional[types.CoinTransactionInclude] = None,
        order: Optional[Union[types.CoinTransactionOrderByInput, List[types.CoinTransactionOrderByInput]]] = None,
        distinct: Optional[List[types.CoinTransactionScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single CoinTransaction record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            CoinTransaction filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned CoinTransaction model
        order
            Order the returned CoinTransaction records by any field
        distinct
            Filter CoinTransaction records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.CoinTransaction
            The first CoinTransaction record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second CoinTransaction record ordered by the transaction_time field
        cointransaction = await CoinTransaction.prisma().find_first_or_raise(
            skip=1,
            order={
                'transaction_time': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.CoinTransactionUpdateInput,
        where: types.CoinTransactionWhereUniqueInput,
        include: Optional[types.CoinTransactionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single CoinTransaction record.

        Parameters
        ----------
        data
            CoinTransaction record data specifying what to update
        where
            CoinTransaction filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned CoinTransaction model

        Returns
        -------
        prisma.models.CoinTransaction
            The updated CoinTransaction record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        cointransaction = await CoinTransaction.prisma().update(
            where={
                'transaction_id': 93253262,
            },
            data={
                # data to update the CoinTransaction record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.CoinTransactionWhereUniqueInput,
        data: types.CoinTransactionUpsertInput,
        include: Optional[types.CoinTransactionInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            CoinTransaction filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned CoinTransaction model

        Returns
        -------
        prisma.models.CoinTransaction
            The created or updated CoinTransaction record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        cointransaction = await CoinTransaction.prisma().upsert(
            where={
                'transaction_id': 2053047983,
            },
            data={
                'create': {
                    'transaction_id': 2053047983,
                    'user_id': 60335757,
                    'amount': 684462146,
                    'transaction_type': enums.TransactionType.TASK_COMPLETION,
                },
                'update': {
                    'user_id': 60335757,
                    'amount': 684462146,
                    'transaction_type': enums.TransactionType.TASK_COMPLETION,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.CoinTransactionUpdateManyMutationInput,
        where: types.CoinTransactionWhereInput,
    ) -> int:
        """Update multiple CoinTransaction records

        Parameters
        ----------
        data
            CoinTransaction data to update the selected CoinTransaction records to
        where
            Filter to select the CoinTransaction records to update

        Returns
        -------
        int
            The total number of CoinTransaction records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all CoinTransaction records
        total = await CoinTransaction.prisma().update_many(
            data={
                'related_todo_id': 685333180
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CoinTransactionWhereInput] = None,
        cursor: Optional[types.CoinTransactionWhereUniqueInput] = None,
    ) -> int:
        """Count the number of CoinTransaction records present in the database

        Parameters
        ----------
        select
            Select the CoinTransaction fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            CoinTransaction filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CoinTransactionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await CoinTransaction.prisma().count()

        # results: prisma.types.CoinTransactionCountAggregateOutput
        results = await CoinTransaction.prisma().count(
            select={
                '_all': True,
                'transaction_id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.CoinTransactionCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CoinTransactionWhereInput] = None,
        cursor: Optional[types.CoinTransactionWhereUniqueInput] = None,
    ) -> types.CoinTransactionCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.CoinTransactionCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CoinTransactionWhereInput] = None,
        cursor: Optional[types.CoinTransactionWhereUniqueInput] = None,
    ) -> Union[int, types.CoinTransactionCountAggregateOutput]:
        """Count the number of CoinTransaction records present in the database

        Parameters
        ----------
        select
            Select the CoinTransaction fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            CoinTransaction filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.CoinTransactionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await CoinTransaction.prisma().count()

        # results: prisma.types.CoinTransactionCountAggregateOutput
        results = await CoinTransaction.prisma().count(
            select={
                '_all': True,
                'user_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.CoinTransactionCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.CoinTransactionWhereInput] = None
    ) -> int:
        """Delete multiple CoinTransaction records.

        Parameters
        ----------
        where
            Optional CoinTransaction filter to find the records to be deleted

        Returns
        -------
        int
            The total number of CoinTransaction records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all CoinTransaction records
        total = await CoinTransaction.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.CoinTransactionScalarFieldKeys'],
        *,
        where: Optional['types.CoinTransactionWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.CoinTransactionAvgAggregateInput'] = None,
        sum: Optional['types.CoinTransactionSumAggregateInput'] = None,
        min: Optional['types.CoinTransactionMinAggregateInput'] = None,
        max: Optional['types.CoinTransactionMaxAggregateInput'] = None,
        having: Optional['types.CoinTransactionScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.CoinTransactionCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.CoinTransactionScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.CoinTransactionScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.CoinTransactionGroupByOutput']:
        """Group CoinTransaction records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar CoinTransaction fields to group records by
        where
            CoinTransaction filter to select records
        take
            Limit the maximum number of CoinTransaction records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.CoinTransactionGroupByOutput]
            A list of dictionaries representing the CoinTransaction record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group CoinTransaction records by amount values
        # and count how many records are in each group
        results = await CoinTransaction.prisma().group_by(
            ['amount'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class RewardActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Reward]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Reward.prisma().query_raw(
            'SELECT * FROM Reward WHERE reward_id = $1',
            127474245,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Reward
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Reward.prisma().query_first(
            'SELECT * FROM Reward WHERE reward_name = $1',
            'jeijcbhfe',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.RewardCreateInput,
        include: Optional[types.RewardInclude] = None
    ) -> _PrismaModelT:
        """Create a new Reward record.

        Parameters
        ----------
        data
            Reward record data
        include
            Specifies which relations should be loaded on the returned Reward model

        Returns
        -------
        prisma.models.Reward
            The created Reward record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Reward record from just the required fields
        reward = await Reward.prisma().create(
            data={
                # data to create a Reward record
                'reward_name': 'bjgejjabff',
                'coin_cost': 1228891816,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.RewardCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Reward records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Reward record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Reward.prisma().create_many(
            data=[
                {
                    # data to create a Reward record
                    'reward_name': 'cffcachfd',
                    'coin_cost': 1223573862,
                },
                {
                    # data to create a Reward record
                    'reward_name': 'febcgjbfj',
                    'coin_cost': 1064846676,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.RewardWhereUniqueInput,
        include: Optional[types.RewardInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Reward record.

        Parameters
        ----------
        where
            Reward filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Reward model

        Returns
        -------
        prisma.models.Reward
            The deleted Reward record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        reward = await Reward.prisma().delete(
            where={
                'reward_id': 508382461,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.RewardWhereUniqueInput,
        include: Optional[types.RewardInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Reward record.

        Parameters
        ----------
        where
            Reward filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Reward model

        Returns
        -------
        prisma.models.Reward
            The found Reward record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        reward = await Reward.prisma().find_unique(
            where={
                'reward_id': 1024265714,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.RewardWhereUniqueInput,
        include: Optional[types.RewardInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Reward record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Reward filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Reward model

        Returns
        -------
        prisma.models.Reward
            The found Reward record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        reward = await Reward.prisma().find_unique_or_raise(
            where={
                'reward_id': 872078403,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RewardWhereInput] = None,
        cursor: Optional[types.RewardWhereUniqueInput] = None,
        include: Optional[types.RewardInclude] = None,
        order: Optional[Union[types.RewardOrderByInput, List[types.RewardOrderByInput]]] = None,
        distinct: Optional[List[types.RewardScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Reward records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Reward records returned
        skip
            Ignore the first N results
        where
            Reward filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Reward model
        order
            Order the returned Reward records by any field
        distinct
            Filter Reward records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Reward]
            The list of all Reward records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Reward records
        rewards = await Reward.prisma().find_many(take=10)

        # find the first 5 Reward records ordered by the description field
        rewards = await Reward.prisma().find_many(
            take=5,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RewardWhereInput] = None,
        cursor: Optional[types.RewardWhereUniqueInput] = None,
        include: Optional[types.RewardInclude] = None,
        order: Optional[Union[types.RewardOrderByInput, List[types.RewardOrderByInput]]] = None,
        distinct: Optional[List[types.RewardScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Reward record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Reward filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Reward model
        order
            Order the returned Reward records by any field
        distinct
            Filter Reward records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Reward
            The first Reward record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Reward record ordered by the coin_cost field
        reward = await Reward.prisma().find_first(
            skip=1,
            order={
                'coin_cost': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RewardWhereInput] = None,
        cursor: Optional[types.RewardWhereUniqueInput] = None,
        include: Optional[types.RewardInclude] = None,
        order: Optional[Union[types.RewardOrderByInput, List[types.RewardOrderByInput]]] = None,
        distinct: Optional[List[types.RewardScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Reward record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Reward filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Reward model
        order
            Order the returned Reward records by any field
        distinct
            Filter Reward records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Reward
            The first Reward record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Reward record ordered by the is_repeatable field
        reward = await Reward.prisma().find_first_or_raise(
            skip=1,
            order={
                'is_repeatable': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.RewardUpdateInput,
        where: types.RewardWhereUniqueInput,
        include: Optional[types.RewardInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Reward record.

        Parameters
        ----------
        data
            Reward record data specifying what to update
        where
            Reward filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Reward model

        Returns
        -------
        prisma.models.Reward
            The updated Reward record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        reward = await Reward.prisma().update(
            where={
                'reward_id': 1874748096,
            },
            data={
                # data to update the Reward record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.RewardWhereUniqueInput,
        data: types.RewardUpsertInput,
        include: Optional[types.RewardInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Reward filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Reward model

        Returns
        -------
        prisma.models.Reward
            The created or updated Reward record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        reward = await Reward.prisma().upsert(
            where={
                'reward_id': 916896761,
            },
            data={
                'create': {
                    'reward_id': 916896761,
                    'reward_name': 'febcgjbfj',
                    'coin_cost': 1064846676,
                },
                'update': {
                    'reward_name': 'febcgjbfj',
                    'coin_cost': 1064846676,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.RewardUpdateManyMutationInput,
        where: types.RewardWhereInput,
    ) -> int:
        """Update multiple Reward records

        Parameters
        ----------
        data
            Reward data to update the selected Reward records to
        where
            Filter to select the Reward records to update

        Returns
        -------
        int
            The total number of Reward records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Reward records
        total = await Reward.prisma().update_many(
            data={
                'reward_id': 769267518
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RewardWhereInput] = None,
        cursor: Optional[types.RewardWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Reward records present in the database

        Parameters
        ----------
        select
            Select the Reward fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Reward filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RewardCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Reward.prisma().count()

        # results: prisma.types.RewardCountAggregateOutput
        results = await Reward.prisma().count(
            select={
                '_all': True,
                'reward_name': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.RewardCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RewardWhereInput] = None,
        cursor: Optional[types.RewardWhereUniqueInput] = None,
    ) -> types.RewardCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.RewardCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RewardWhereInput] = None,
        cursor: Optional[types.RewardWhereUniqueInput] = None,
    ) -> Union[int, types.RewardCountAggregateOutput]:
        """Count the number of Reward records present in the database

        Parameters
        ----------
        select
            Select the Reward fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Reward filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RewardCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Reward.prisma().count()

        # results: prisma.types.RewardCountAggregateOutput
        results = await Reward.prisma().count(
            select={
                '_all': True,
                'description': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.RewardCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.RewardWhereInput] = None
    ) -> int:
        """Delete multiple Reward records.

        Parameters
        ----------
        where
            Optional Reward filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Reward records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Reward records
        total = await Reward.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.RewardScalarFieldKeys'],
        *,
        where: Optional['types.RewardWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.RewardAvgAggregateInput'] = None,
        sum: Optional['types.RewardSumAggregateInput'] = None,
        min: Optional['types.RewardMinAggregateInput'] = None,
        max: Optional['types.RewardMaxAggregateInput'] = None,
        having: Optional['types.RewardScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.RewardCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.RewardScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.RewardScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.RewardGroupByOutput']:
        """Group Reward records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Reward fields to group records by
        where
            Reward filter to select records
        take
            Limit the maximum number of Reward records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.RewardGroupByOutput]
            A list of dictionaries representing the Reward record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Reward records by coin_cost values
        # and count how many records are in each group
        results = await Reward.prisma().group_by(
            ['coin_cost'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class RewardRedemptionActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.RewardRedemption]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await RewardRedemption.prisma().query_raw(
            'SELECT * FROM RewardRedemption WHERE redemption_id = $1',
            820312479,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.RewardRedemption
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await RewardRedemption.prisma().query_first(
            'SELECT * FROM RewardRedemption WHERE user_id = $1',
            92728044,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.RewardRedemptionCreateInput,
        include: Optional[types.RewardRedemptionInclude] = None
    ) -> _PrismaModelT:
        """Create a new RewardRedemption record.

        Parameters
        ----------
        data
            RewardRedemption record data
        include
            Specifies which relations should be loaded on the returned RewardRedemption model

        Returns
        -------
        prisma.models.RewardRedemption
            The created RewardRedemption record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a RewardRedemption record from just the required fields
        rewardredemption = await RewardRedemption.prisma().create(
            data={
                # data to create a RewardRedemption record
                'user_id': 344858293,
                'reward_id': 1121741130,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.RewardRedemptionCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple RewardRedemption records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of RewardRedemption record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await RewardRedemption.prisma().create_many(
            data=[
                {
                    # data to create a RewardRedemption record
                    'user_id': 1495896251,
                    'reward_id': 208521688,
                },
                {
                    # data to create a RewardRedemption record
                    'user_id': 860811569,
                    'reward_id': 1660932118,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.RewardRedemptionWhereUniqueInput,
        include: Optional[types.RewardRedemptionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single RewardRedemption record.

        Parameters
        ----------
        where
            RewardRedemption filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned RewardRedemption model

        Returns
        -------
        prisma.models.RewardRedemption
            The deleted RewardRedemption record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        rewardredemption = await RewardRedemption.prisma().delete(
            where={
                'redemption_id': 525761943,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.RewardRedemptionWhereUniqueInput,
        include: Optional[types.RewardRedemptionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique RewardRedemption record.

        Parameters
        ----------
        where
            RewardRedemption filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned RewardRedemption model

        Returns
        -------
        prisma.models.RewardRedemption
            The found RewardRedemption record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        rewardredemption = await RewardRedemption.prisma().find_unique(
            where={
                'redemption_id': 736209796,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.RewardRedemptionWhereUniqueInput,
        include: Optional[types.RewardRedemptionInclude] = None
    ) -> _PrismaModelT:
        """Find a unique RewardRedemption record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            RewardRedemption filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned RewardRedemption model

        Returns
        -------
        prisma.models.RewardRedemption
            The found RewardRedemption record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        rewardredemption = await RewardRedemption.prisma().find_unique_or_raise(
            where={
                'redemption_id': 493907821,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RewardRedemptionWhereInput] = None,
        cursor: Optional[types.RewardRedemptionWhereUniqueInput] = None,
        include: Optional[types.RewardRedemptionInclude] = None,
        order: Optional[Union[types.RewardRedemptionOrderByInput, List[types.RewardRedemptionOrderByInput]]] = None,
        distinct: Optional[List[types.RewardRedemptionScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple RewardRedemption records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of RewardRedemption records returned
        skip
            Ignore the first N results
        where
            RewardRedemption filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned RewardRedemption model
        order
            Order the returned RewardRedemption records by any field
        distinct
            Filter RewardRedemption records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.RewardRedemption]
            The list of all RewardRedemption records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 RewardRedemption records
        rewardredemptions = await RewardRedemption.prisma().find_many(take=10)

        # find the first 5 RewardRedemption records ordered by the reward_id field
        rewardredemptions = await RewardRedemption.prisma().find_many(
            take=5,
            order={
                'reward_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RewardRedemptionWhereInput] = None,
        cursor: Optional[types.RewardRedemptionWhereUniqueInput] = None,
        include: Optional[types.RewardRedemptionInclude] = None,
        order: Optional[Union[types.RewardRedemptionOrderByInput, List[types.RewardRedemptionOrderByInput]]] = None,
        distinct: Optional[List[types.RewardRedemptionScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single RewardRedemption record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            RewardRedemption filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned RewardRedemption model
        order
            Order the returned RewardRedemption records by any field
        distinct
            Filter RewardRedemption records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.RewardRedemption
            The first RewardRedemption record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second RewardRedemption record ordered by the redemption_date field
        rewardredemption = await RewardRedemption.prisma().find_first(
            skip=1,
            order={
                'redemption_date': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RewardRedemptionWhereInput] = None,
        cursor: Optional[types.RewardRedemptionWhereUniqueInput] = None,
        include: Optional[types.RewardRedemptionInclude] = None,
        order: Optional[Union[types.RewardRedemptionOrderByInput, List[types.RewardRedemptionOrderByInput]]] = None,
        distinct: Optional[List[types.RewardRedemptionScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single RewardRedemption record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            RewardRedemption filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned RewardRedemption model
        order
            Order the returned RewardRedemption records by any field
        distinct
            Filter RewardRedemption records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.RewardRedemption
            The first RewardRedemption record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second RewardRedemption record ordered by the redemption_id field
        rewardredemption = await RewardRedemption.prisma().find_first_or_raise(
            skip=1,
            order={
                'redemption_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.RewardRedemptionUpdateInput,
        where: types.RewardRedemptionWhereUniqueInput,
        include: Optional[types.RewardRedemptionInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single RewardRedemption record.

        Parameters
        ----------
        data
            RewardRedemption record data specifying what to update
        where
            RewardRedemption filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned RewardRedemption model

        Returns
        -------
        prisma.models.RewardRedemption
            The updated RewardRedemption record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        rewardredemption = await RewardRedemption.prisma().update(
            where={
                'redemption_id': 639686562,
            },
            data={
                # data to update the RewardRedemption record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.RewardRedemptionWhereUniqueInput,
        data: types.RewardRedemptionUpsertInput,
        include: Optional[types.RewardRedemptionInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            RewardRedemption filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned RewardRedemption model

        Returns
        -------
        prisma.models.RewardRedemption
            The created or updated RewardRedemption record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        rewardredemption = await RewardRedemption.prisma().upsert(
            where={
                'redemption_id': 654007347,
            },
            data={
                'create': {
                    'redemption_id': 654007347,
                    'user_id': 860811569,
                    'reward_id': 1660932118,
                },
                'update': {
                    'user_id': 860811569,
                    'reward_id': 1660932118,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.RewardRedemptionUpdateManyMutationInput,
        where: types.RewardRedemptionWhereInput,
    ) -> int:
        """Update multiple RewardRedemption records

        Parameters
        ----------
        data
            RewardRedemption data to update the selected RewardRedemption records to
        where
            Filter to select the RewardRedemption records to update

        Returns
        -------
        int
            The total number of RewardRedemption records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all RewardRedemption records
        total = await RewardRedemption.prisma().update_many(
            data={
                'user_id': 1905261552
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RewardRedemptionWhereInput] = None,
        cursor: Optional[types.RewardRedemptionWhereUniqueInput] = None,
    ) -> int:
        """Count the number of RewardRedemption records present in the database

        Parameters
        ----------
        select
            Select the RewardRedemption fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            RewardRedemption filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RewardRedemptionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await RewardRedemption.prisma().count()

        # results: prisma.types.RewardRedemptionCountAggregateOutput
        results = await RewardRedemption.prisma().count(
            select={
                '_all': True,
                'reward_id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.RewardRedemptionCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RewardRedemptionWhereInput] = None,
        cursor: Optional[types.RewardRedemptionWhereUniqueInput] = None,
    ) -> types.RewardRedemptionCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.RewardRedemptionCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RewardRedemptionWhereInput] = None,
        cursor: Optional[types.RewardRedemptionWhereUniqueInput] = None,
    ) -> Union[int, types.RewardRedemptionCountAggregateOutput]:
        """Count the number of RewardRedemption records present in the database

        Parameters
        ----------
        select
            Select the RewardRedemption fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            RewardRedemption filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RewardRedemptionCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await RewardRedemption.prisma().count()

        # results: prisma.types.RewardRedemptionCountAggregateOutput
        results = await RewardRedemption.prisma().count(
            select={
                '_all': True,
                'redemption_date': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.RewardRedemptionCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.RewardRedemptionWhereInput] = None
    ) -> int:
        """Delete multiple RewardRedemption records.

        Parameters
        ----------
        where
            Optional RewardRedemption filter to find the records to be deleted

        Returns
        -------
        int
            The total number of RewardRedemption records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all RewardRedemption records
        total = await RewardRedemption.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.RewardRedemptionScalarFieldKeys'],
        *,
        where: Optional['types.RewardRedemptionWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.RewardRedemptionAvgAggregateInput'] = None,
        sum: Optional['types.RewardRedemptionSumAggregateInput'] = None,
        min: Optional['types.RewardRedemptionMinAggregateInput'] = None,
        max: Optional['types.RewardRedemptionMaxAggregateInput'] = None,
        having: Optional['types.RewardRedemptionScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.RewardRedemptionCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.RewardRedemptionScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.RewardRedemptionScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.RewardRedemptionGroupByOutput']:
        """Group RewardRedemption records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar RewardRedemption fields to group records by
        where
            RewardRedemption filter to select records
        take
            Limit the maximum number of RewardRedemption records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.RewardRedemptionGroupByOutput]
            A list of dictionaries representing the RewardRedemption record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group RewardRedemption records by redemption_id values
        # and count how many records are in each group
        results = await RewardRedemption.prisma().group_by(
            ['redemption_id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class AchievementActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Achievement]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Achievement.prisma().query_raw(
            'SELECT * FROM Achievement WHERE achievement_id = $1',
            78746985,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Achievement
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Achievement.prisma().query_first(
            'SELECT * FROM Achievement WHERE name = $1',
            'bdjidcidac',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.AchievementCreateInput,
        include: Optional[types.AchievementInclude] = None
    ) -> _PrismaModelT:
        """Create a new Achievement record.

        Parameters
        ----------
        data
            Achievement record data
        include
            Specifies which relations should be loaded on the returned Achievement model

        Returns
        -------
        prisma.models.Achievement
            The created Achievement record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Achievement record from just the required fields
        achievement = await Achievement.prisma().create(
            data={
                # data to create a Achievement record
                'name': 'ifgaaagff',
                'description': 'befcddgjce',
                'coin_bonus': 1573199653,
                'condition_type': enums.ConditionType.TASK_COUNT,
                'condition_value': 2013903098,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.AchievementCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Achievement records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Achievement record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Achievement.prisma().create_many(
            data=[
                {
                    # data to create a Achievement record
                    'name': 'faajgfadf',
                    'description': 'biaagcedjc',
                    'coin_bonus': 2077067425,
                    'condition_type': enums.ConditionType.TASK_COUNT,
                    'condition_value': 1672112838,
                },
                {
                    # data to create a Achievement record
                    'name': 'jcgghhgdj',
                    'description': 'beehgcebbg',
                    'coin_bonus': 1738083805,
                    'condition_type': enums.ConditionType.TASK_COUNT,
                    'condition_value': 340946258,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.AchievementWhereUniqueInput,
        include: Optional[types.AchievementInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Achievement record.

        Parameters
        ----------
        where
            Achievement filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Achievement model

        Returns
        -------
        prisma.models.Achievement
            The deleted Achievement record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        achievement = await Achievement.prisma().delete(
            where={
                'achievement_id': 601077795,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.AchievementWhereUniqueInput,
        include: Optional[types.AchievementInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Achievement record.

        Parameters
        ----------
        where
            Achievement filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Achievement model

        Returns
        -------
        prisma.models.Achievement
            The found Achievement record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        achievement = await Achievement.prisma().find_unique(
            where={
                'achievement_id': 290603296,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.AchievementWhereUniqueInput,
        include: Optional[types.AchievementInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Achievement record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Achievement filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Achievement model

        Returns
        -------
        prisma.models.Achievement
            The found Achievement record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        achievement = await Achievement.prisma().find_unique_or_raise(
            where={
                'achievement_id': 1855826649,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AchievementWhereInput] = None,
        cursor: Optional[types.AchievementWhereUniqueInput] = None,
        include: Optional[types.AchievementInclude] = None,
        order: Optional[Union[types.AchievementOrderByInput, List[types.AchievementOrderByInput]]] = None,
        distinct: Optional[List[types.AchievementScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Achievement records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Achievement records returned
        skip
            Ignore the first N results
        where
            Achievement filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Achievement model
        order
            Order the returned Achievement records by any field
        distinct
            Filter Achievement records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Achievement]
            The list of all Achievement records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Achievement records
        achievements = await Achievement.prisma().find_many(take=10)

        # find the first 5 Achievement records ordered by the description field
        achievements = await Achievement.prisma().find_many(
            take=5,
            order={
                'description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AchievementWhereInput] = None,
        cursor: Optional[types.AchievementWhereUniqueInput] = None,
        include: Optional[types.AchievementInclude] = None,
        order: Optional[Union[types.AchievementOrderByInput, List[types.AchievementOrderByInput]]] = None,
        distinct: Optional[List[types.AchievementScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Achievement record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Achievement filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Achievement model
        order
            Order the returned Achievement records by any field
        distinct
            Filter Achievement records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Achievement
            The first Achievement record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Achievement record ordered by the coin_bonus field
        achievement = await Achievement.prisma().find_first(
            skip=1,
            order={
                'coin_bonus': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AchievementWhereInput] = None,
        cursor: Optional[types.AchievementWhereUniqueInput] = None,
        include: Optional[types.AchievementInclude] = None,
        order: Optional[Union[types.AchievementOrderByInput, List[types.AchievementOrderByInput]]] = None,
        distinct: Optional[List[types.AchievementScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Achievement record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Achievement filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Achievement model
        order
            Order the returned Achievement records by any field
        distinct
            Filter Achievement records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Achievement
            The first Achievement record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Achievement record ordered by the condition_type field
        achievement = await Achievement.prisma().find_first_or_raise(
            skip=1,
            order={
                'condition_type': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.AchievementUpdateInput,
        where: types.AchievementWhereUniqueInput,
        include: Optional[types.AchievementInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Achievement record.

        Parameters
        ----------
        data
            Achievement record data specifying what to update
        where
            Achievement filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Achievement model

        Returns
        -------
        prisma.models.Achievement
            The updated Achievement record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        achievement = await Achievement.prisma().update(
            where={
                'achievement_id': 1611009182,
            },
            data={
                # data to update the Achievement record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.AchievementWhereUniqueInput,
        data: types.AchievementUpsertInput,
        include: Optional[types.AchievementInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Achievement filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Achievement model

        Returns
        -------
        prisma.models.Achievement
            The created or updated Achievement record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        achievement = await Achievement.prisma().upsert(
            where={
                'achievement_id': 446673791,
            },
            data={
                'create': {
                    'achievement_id': 446673791,
                    'name': 'jcgghhgdj',
                    'description': 'beehgcebbg',
                    'coin_bonus': 1738083805,
                    'condition_type': enums.ConditionType.TASK_COUNT,
                    'condition_value': 340946258,
                },
                'update': {
                    'name': 'jcgghhgdj',
                    'description': 'beehgcebbg',
                    'coin_bonus': 1738083805,
                    'condition_type': enums.ConditionType.TASK_COUNT,
                    'condition_value': 340946258,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.AchievementUpdateManyMutationInput,
        where: types.AchievementWhereInput,
    ) -> int:
        """Update multiple Achievement records

        Parameters
        ----------
        data
            Achievement data to update the selected Achievement records to
        where
            Filter to select the Achievement records to update

        Returns
        -------
        int
            The total number of Achievement records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Achievement records
        total = await Achievement.prisma().update_many(
            data={
                'condition_value': 300568396
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AchievementWhereInput] = None,
        cursor: Optional[types.AchievementWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Achievement records present in the database

        Parameters
        ----------
        select
            Select the Achievement fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Achievement filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AchievementCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Achievement.prisma().count()

        # results: prisma.types.AchievementCountAggregateOutput
        results = await Achievement.prisma().count(
            select={
                '_all': True,
                'achievement_id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.AchievementCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AchievementWhereInput] = None,
        cursor: Optional[types.AchievementWhereUniqueInput] = None,
    ) -> types.AchievementCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.AchievementCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AchievementWhereInput] = None,
        cursor: Optional[types.AchievementWhereUniqueInput] = None,
    ) -> Union[int, types.AchievementCountAggregateOutput]:
        """Count the number of Achievement records present in the database

        Parameters
        ----------
        select
            Select the Achievement fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Achievement filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AchievementCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Achievement.prisma().count()

        # results: prisma.types.AchievementCountAggregateOutput
        results = await Achievement.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.AchievementCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.AchievementWhereInput] = None
    ) -> int:
        """Delete multiple Achievement records.

        Parameters
        ----------
        where
            Optional Achievement filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Achievement records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Achievement records
        total = await Achievement.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.AchievementScalarFieldKeys'],
        *,
        where: Optional['types.AchievementWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.AchievementAvgAggregateInput'] = None,
        sum: Optional['types.AchievementSumAggregateInput'] = None,
        min: Optional['types.AchievementMinAggregateInput'] = None,
        max: Optional['types.AchievementMaxAggregateInput'] = None,
        having: Optional['types.AchievementScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.AchievementCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.AchievementScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.AchievementScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.AchievementGroupByOutput']:
        """Group Achievement records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Achievement fields to group records by
        where
            Achievement filter to select records
        take
            Limit the maximum number of Achievement records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.AchievementGroupByOutput]
            A list of dictionaries representing the Achievement record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Achievement records by description values
        # and count how many records are in each group
        results = await Achievement.prisma().group_by(
            ['description'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserAchievementActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.UserAchievement]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await UserAchievement.prisma().query_raw(
            'SELECT * FROM UserAchievement WHERE user_id = $1',
            632626069,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.UserAchievement
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await UserAchievement.prisma().query_first(
            'SELECT * FROM UserAchievement WHERE achievement_id = $1',
            1724011690,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserAchievementCreateInput,
        include: Optional[types.UserAchievementInclude] = None
    ) -> _PrismaModelT:
        """Create a new UserAchievement record.

        Parameters
        ----------
        data
            UserAchievement record data
        include
            Specifies which relations should be loaded on the returned UserAchievement model

        Returns
        -------
        prisma.models.UserAchievement
            The created UserAchievement record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a UserAchievement record from just the required fields
        userachievement = await UserAchievement.prisma().create(
            data={
                # data to create a UserAchievement record
                'user_id': 470157467,
                'achievement_id': 1209209912,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserAchievementCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple UserAchievement records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of UserAchievement record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await UserAchievement.prisma().create_many(
            data=[
                {
                    # data to create a UserAchievement record
                    'user_id': 1536744465,
                    'achievement_id': 424218998,
                },
                {
                    # data to create a UserAchievement record
                    'user_id': 2125632375,
                    'achievement_id': 536951780,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserAchievementWhereUniqueInput,
        include: Optional[types.UserAchievementInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single UserAchievement record.

        Parameters
        ----------
        where
            UserAchievement filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned UserAchievement model

        Returns
        -------
        prisma.models.UserAchievement
            The deleted UserAchievement record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userachievement = await UserAchievement.prisma().delete(
            where={
                # UserAchievement where unique filter

            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserAchievementWhereUniqueInput,
        include: Optional[types.UserAchievementInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique UserAchievement record.

        Parameters
        ----------
        where
            UserAchievement filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserAchievement model

        Returns
        -------
        prisma.models.UserAchievement
            The found UserAchievement record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userachievement = await UserAchievement.prisma().find_unique(
            where={
                # UserAchievement where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserAchievementWhereUniqueInput,
        include: Optional[types.UserAchievementInclude] = None
    ) -> _PrismaModelT:
        """Find a unique UserAchievement record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            UserAchievement filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserAchievement model

        Returns
        -------
        prisma.models.UserAchievement
            The found UserAchievement record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userachievement = await UserAchievement.prisma().find_unique_or_raise(
            where={
                # UserAchievement where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserAchievementWhereInput] = None,
        cursor: Optional[types.UserAchievementWhereUniqueInput] = None,
        include: Optional[types.UserAchievementInclude] = None,
        order: Optional[Union[types.UserAchievementOrderByInput, List[types.UserAchievementOrderByInput]]] = None,
        distinct: Optional[List[types.UserAchievementScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple UserAchievement records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of UserAchievement records returned
        skip
            Ignore the first N results
        where
            UserAchievement filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserAchievement model
        order
            Order the returned UserAchievement records by any field
        distinct
            Filter UserAchievement records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.UserAchievement]
            The list of all UserAchievement records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 UserAchievement records
        userachievements = await UserAchievement.prisma().find_many(take=10)

        # find the first 5 UserAchievement records ordered by the unlocked_at field
        userachievements = await UserAchievement.prisma().find_many(
            take=5,
            order={
                'unlocked_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserAchievementWhereInput] = None,
        cursor: Optional[types.UserAchievementWhereUniqueInput] = None,
        include: Optional[types.UserAchievementInclude] = None,
        order: Optional[Union[types.UserAchievementOrderByInput, List[types.UserAchievementOrderByInput]]] = None,
        distinct: Optional[List[types.UserAchievementScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single UserAchievement record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserAchievement filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserAchievement model
        order
            Order the returned UserAchievement records by any field
        distinct
            Filter UserAchievement records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserAchievement
            The first UserAchievement record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserAchievement record ordered by the user_id field
        userachievement = await UserAchievement.prisma().find_first(
            skip=1,
            order={
                'user_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserAchievementWhereInput] = None,
        cursor: Optional[types.UserAchievementWhereUniqueInput] = None,
        include: Optional[types.UserAchievementInclude] = None,
        order: Optional[Union[types.UserAchievementOrderByInput, List[types.UserAchievementOrderByInput]]] = None,
        distinct: Optional[List[types.UserAchievementScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single UserAchievement record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserAchievement filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserAchievement model
        order
            Order the returned UserAchievement records by any field
        distinct
            Filter UserAchievement records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserAchievement
            The first UserAchievement record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserAchievement record ordered by the achievement_id field
        userachievement = await UserAchievement.prisma().find_first_or_raise(
            skip=1,
            order={
                'achievement_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserAchievementUpdateInput,
        where: types.UserAchievementWhereUniqueInput,
        include: Optional[types.UserAchievementInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single UserAchievement record.

        Parameters
        ----------
        data
            UserAchievement record data specifying what to update
        where
            UserAchievement filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned UserAchievement model

        Returns
        -------
        prisma.models.UserAchievement
            The updated UserAchievement record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        userachievement = await UserAchievement.prisma().update(
            where={
                # UserAchievement where unique filter

            },
            data={
                # data to update the UserAchievement record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserAchievementWhereUniqueInput,
        data: types.UserAchievementUpsertInput,
        include: Optional[types.UserAchievementInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            UserAchievement filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned UserAchievement model

        Returns
        -------
        prisma.models.UserAchievement
            The created or updated UserAchievement record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userachievement = await UserAchievement.prisma().upsert(
            where={
                # UserAchievement where unique filter
            },
            data={
                'create': {
                    # UserAchievement data to be set if the record does not exist
                },
                'update': {
                    # UserAchievement data to be set if the record does exist
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserAchievementUpdateManyMutationInput,
        where: types.UserAchievementWhereInput,
    ) -> int:
        """Update multiple UserAchievement records

        Parameters
        ----------
        data
            UserAchievement data to update the selected UserAchievement records to
        where
            Filter to select the UserAchievement records to update

        Returns
        -------
        int
            The total number of UserAchievement records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all UserAchievement records
        total = await UserAchievement.prisma().update_many(
            data={
                'unlocked_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserAchievementWhereInput] = None,
        cursor: Optional[types.UserAchievementWhereUniqueInput] = None,
    ) -> int:
        """Count the number of UserAchievement records present in the database

        Parameters
        ----------
        select
            Select the UserAchievement fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserAchievement filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserAchievementCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserAchievement.prisma().count()

        # results: prisma.types.UserAchievementCountAggregateOutput
        results = await UserAchievement.prisma().count(
            select={
                '_all': True,
                'user_id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserAchievementCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserAchievementWhereInput] = None,
        cursor: Optional[types.UserAchievementWhereUniqueInput] = None,
    ) -> types.UserAchievementCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserAchievementCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserAchievementWhereInput] = None,
        cursor: Optional[types.UserAchievementWhereUniqueInput] = None,
    ) -> Union[int, types.UserAchievementCountAggregateOutput]:
        """Count the number of UserAchievement records present in the database

        Parameters
        ----------
        select
            Select the UserAchievement fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserAchievement filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserAchievementCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserAchievement.prisma().count()

        # results: prisma.types.UserAchievementCountAggregateOutput
        results = await UserAchievement.prisma().count(
            select={
                '_all': True,
                'achievement_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserAchievementCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserAchievementWhereInput] = None
    ) -> int:
        """Delete multiple UserAchievement records.

        Parameters
        ----------
        where
            Optional UserAchievement filter to find the records to be deleted

        Returns
        -------
        int
            The total number of UserAchievement records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all UserAchievement records
        total = await UserAchievement.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserAchievementScalarFieldKeys'],
        *,
        where: Optional['types.UserAchievementWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAchievementAvgAggregateInput'] = None,
        sum: Optional['types.UserAchievementSumAggregateInput'] = None,
        min: Optional['types.UserAchievementMinAggregateInput'] = None,
        max: Optional['types.UserAchievementMaxAggregateInput'] = None,
        having: Optional['types.UserAchievementScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserAchievementCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserAchievementScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserAchievementScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserAchievementGroupByOutput']:
        """Group UserAchievement records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar UserAchievement fields to group records by
        where
            UserAchievement filter to select records
        take
            Limit the maximum number of UserAchievement records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserAchievementGroupByOutput]
            A list of dictionaries representing the UserAchievement record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group UserAchievement records by unlocked_at values
        # and count how many records are in each group
        results = await UserAchievement.prisma().group_by(
            ['unlocked_at'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models