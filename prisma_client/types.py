# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _TransactionTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.TransactionType']]


class _TransactionTypeListFilterHasInput(TypedDict):
    has: 'enums.TransactionType'


class _TransactionTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.TransactionType']


class _TransactionTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.TransactionType']


class _TransactionTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


TransactionTypeListFilter = Union[
    _TransactionTypeListFilterHasInput,
    _TransactionTypeListFilterEqualsInput,
    _TransactionTypeListFilterHasSomeInput,
    _TransactionTypeListFilterIsEmptyInput,
    _TransactionTypeListFilterHasEveryInput,
]


class _TransactionTypeListUpdateSet(TypedDict):
    set: List['enums.TransactionType']


class _TransactionTypeListUpdatePush(TypedDict):
    push: List['enums.TransactionType']


TransactionTypeListUpdate = Union[
    List['enums.TransactionType'],
    _TransactionTypeListUpdateSet,
    _TransactionTypeListUpdatePush,
]

class _ConditionTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.ConditionType']]


class _ConditionTypeListFilterHasInput(TypedDict):
    has: 'enums.ConditionType'


class _ConditionTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.ConditionType']


class _ConditionTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.ConditionType']


class _ConditionTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


ConditionTypeListFilter = Union[
    _ConditionTypeListFilterHasInput,
    _ConditionTypeListFilterEqualsInput,
    _ConditionTypeListFilterHasSomeInput,
    _ConditionTypeListFilterIsEmptyInput,
    _ConditionTypeListFilterHasEveryInput,
]


class _ConditionTypeListUpdateSet(TypedDict):
    set: List['enums.ConditionType']


class _ConditionTypeListUpdatePush(TypedDict):
    push: List['enums.ConditionType']


ConditionTypeListUpdate = Union[
    List['enums.ConditionType'],
    _ConditionTypeListUpdateSet,
    _ConditionTypeListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    user_id: _int
    total_coins: _int
    streak_count: _int
    last_active_date: Optional[datetime.datetime]
    todos: 'TodoCreateManyNestedWithoutRelationsInput'
    Todo_categories: 'TodoCategoryCreateManyNestedWithoutRelationsInput'
    coin_transactions: 'CoinTransactionCreateManyNestedWithoutRelationsInput'
    reward_redemptions: 'RewardRedemptionCreateManyNestedWithoutRelationsInput'
    user_achievements: 'UserAchievementCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    username: _str
    email: _str
    password_hash: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    user_id: _int
    total_coins: _int
    streak_count: _int
    last_active_date: Optional[datetime.datetime]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    username: _str
    email: _str
    password_hash: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_user_id_Input = TypedDict(
    '_UserWhereUnique_user_id_Input',
    {
        'user_id': '_int',
    },
    total=True
)

_UserWhereUnique_username_Input = TypedDict(
    '_UserWhereUnique_username_Input',
    {
        'username': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_user_id_Input',
    '_UserWhereUnique_username_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    user_id: Union[AtomicIntInput, _int]
    username: _str
    email: _str
    password_hash: _str
    total_coins: Union[AtomicIntInput, _int]
    streak_count: Union[AtomicIntInput, _int]
    last_active_date: Optional[datetime.datetime]
    todos: 'TodoUpdateManyWithoutRelationsInput'
    Todo_categories: 'TodoCategoryUpdateManyWithoutRelationsInput'
    coin_transactions: 'CoinTransactionUpdateManyWithoutRelationsInput'
    reward_redemptions: 'RewardRedemptionUpdateManyWithoutRelationsInput'
    user_achievements: 'UserAchievementUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    user_id: Union[AtomicIntInput, _int]
    username: _str
    email: _str
    password_hash: _str
    total_coins: Union[AtomicIntInput, _int]
    streak_count: Union[AtomicIntInput, _int]
    last_active_date: Optional[datetime.datetime]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_user_id_OrderByInput = TypedDict(
    '_User_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_User_username_OrderByInput = TypedDict(
    '_User_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_hash_OrderByInput = TypedDict(
    '_User_password_hash_OrderByInput',
    {
        'password_hash': 'SortOrder',
    },
    total=True
)

_User_total_coins_OrderByInput = TypedDict(
    '_User_total_coins_OrderByInput',
    {
        'total_coins': 'SortOrder',
    },
    total=True
)

_User_streak_count_OrderByInput = TypedDict(
    '_User_streak_count_OrderByInput',
    {
        'streak_count': 'SortOrder',
    },
    total=True
)

_User_last_active_date_OrderByInput = TypedDict(
    '_User_last_active_date_OrderByInput',
    {
        'last_active_date': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_user_id_OrderByInput',
    '_User_username_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_hash_OrderByInput',
    '_User_total_coins_OrderByInput',
    '_User_streak_count_OrderByInput',
    '_User_last_active_date_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    todos: Union[bool, 'FindManyTodoArgsFromUser']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromUser']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUser']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUser']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    todos: Union[bool, 'FindManyTodoArgsFromUserRecursive1']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromUserRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserRecursive1']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserRecursive1']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    todos: Union[bool, 'FindManyTodoArgsFromUserRecursive2']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromUserRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserRecursive2']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserRecursive2']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    todos: Union[bool, 'FindManyTodoArgsFromUserRecursive3']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromUserRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserRecursive3']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserRecursive3']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    todos: Union[bool, 'FindManyTodoArgsFromUserRecursive4']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromUserRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserRecursive4']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserRecursive4']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class TodoCategoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    todos: Union[bool, 'FindManyTodoArgsFromUserRecursive1']
    user: Union[bool, 'UserArgsFromUserRecursive1']


class TodoCategoryIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    todos: Union[bool, 'FindManyTodoArgsFromUserRecursive2']
    user: Union[bool, 'UserArgsFromUserRecursive2']


class TodoCategoryIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    todos: Union[bool, 'FindManyTodoArgsFromUserRecursive3']
    user: Union[bool, 'UserArgsFromUserRecursive3']


class TodoCategoryIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    todos: Union[bool, 'FindManyTodoArgsFromUserRecursive4']
    user: Union[bool, 'UserArgsFromUserRecursive4']


class TodoCategoryIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class TodoCategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class TodoCategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class TodoCategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class TodoCategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class TodoCategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyTodoCategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class FindManyTodoCategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class FindManyTodoCategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class FindManyTodoCategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class FindManyTodoCategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    
    

class TodoIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    category: Union[bool, 'TodoCategoryArgsFromUserRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserRecursive1']


class TodoIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    category: Union[bool, 'TodoCategoryArgsFromUserRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserRecursive2']


class TodoIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    category: Union[bool, 'TodoCategoryArgsFromUserRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserRecursive3']


class TodoIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    category: Union[bool, 'TodoCategoryArgsFromUserRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserRecursive4']


class TodoIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class TodoArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TodoIncludeFromTodoRecursive1'


class TodoArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'TodoIncludeFromTodoRecursive2'


class TodoArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'TodoIncludeFromTodoRecursive3'


class TodoArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'TodoIncludeFromTodoRecursive4'


class TodoArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyTodoArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive1'


class FindManyTodoArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive2'


class FindManyTodoArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive3'


class FindManyTodoArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive4'


class FindManyTodoArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    
    

class CoinTransactionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    related_todo: Union[bool, 'TodoArgsFromUserRecursive1']


class CoinTransactionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    related_todo: Union[bool, 'TodoArgsFromUserRecursive2']


class CoinTransactionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    related_todo: Union[bool, 'TodoArgsFromUserRecursive3']


class CoinTransactionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    related_todo: Union[bool, 'TodoArgsFromUserRecursive4']


class CoinTransactionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CoinTransactionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class CoinTransactionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class CoinTransactionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class CoinTransactionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class CoinTransactionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCoinTransactionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class FindManyCoinTransactionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class FindManyCoinTransactionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class FindManyCoinTransactionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class FindManyCoinTransactionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    
    

class RewardIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserRecursive1']


class RewardIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserRecursive2']


class RewardIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserRecursive3']


class RewardIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserRecursive4']


class RewardIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class RewardArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'RewardIncludeFromRewardRecursive1'


class RewardArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'RewardIncludeFromRewardRecursive2'


class RewardArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'RewardIncludeFromRewardRecursive3'


class RewardArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'RewardIncludeFromRewardRecursive4'


class RewardArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyRewardArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive1'


class FindManyRewardArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive2'


class FindManyRewardArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive3'


class FindManyRewardArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive4'


class FindManyRewardArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    
    

class RewardRedemptionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    reward: Union[bool, 'RewardArgsFromUserRecursive1']


class RewardRedemptionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    reward: Union[bool, 'RewardArgsFromUserRecursive2']


class RewardRedemptionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    reward: Union[bool, 'RewardArgsFromUserRecursive3']


class RewardRedemptionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    reward: Union[bool, 'RewardArgsFromUserRecursive4']


class RewardRedemptionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class RewardRedemptionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class RewardRedemptionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class RewardRedemptionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class RewardRedemptionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class RewardRedemptionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyRewardRedemptionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class FindManyRewardRedemptionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class FindManyRewardRedemptionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class FindManyRewardRedemptionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class FindManyRewardRedemptionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    
    

class AchievementIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive1']


class AchievementIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive2']


class AchievementIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive3']


class AchievementIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserRecursive4']


class AchievementIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AchievementArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAchievementArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    achievement: Union[bool, 'AchievementArgsFromUserRecursive1']


class UserAchievementIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    achievement: Union[bool, 'AchievementArgsFromUserRecursive2']


class UserAchievementIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    achievement: Union[bool, 'AchievementArgsFromUserRecursive3']


class UserAchievementIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    achievement: Union[bool, 'AchievementArgsFromUserRecursive4']


class UserAchievementIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserAchievementArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserAchievementArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password_hash: Union[_str, 'types.StringFilter']
    total_coins: Union[_int, 'types.IntFilter']
    streak_count: Union[_int, 'types.IntFilter']
    last_active_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    todos: 'TodoListRelationFilter'
    Todo_categories: 'TodoCategoryListRelationFilter'
    coin_transactions: 'CoinTransactionListRelationFilter'
    reward_redemptions: 'RewardRedemptionListRelationFilter'
    user_achievements: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password_hash: Union[_str, 'types.StringFilter']
    total_coins: Union[_int, 'types.IntFilter']
    streak_count: Union[_int, 'types.IntFilter']
    last_active_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    todos: 'TodoListRelationFilter'
    Todo_categories: 'TodoCategoryListRelationFilter'
    coin_transactions: 'CoinTransactionListRelationFilter'
    reward_redemptions: 'RewardRedemptionListRelationFilter'
    user_achievements: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password_hash: Union[_str, 'types.StringFilter']
    total_coins: Union[_int, 'types.IntFilter']
    streak_count: Union[_int, 'types.IntFilter']
    last_active_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    todos: 'TodoListRelationFilter'
    Todo_categories: 'TodoCategoryListRelationFilter'
    coin_transactions: 'CoinTransactionListRelationFilter'
    reward_redemptions: 'RewardRedemptionListRelationFilter'
    user_achievements: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password_hash: Union[_str, 'types.StringFilter']
    total_coins: Union[_int, 'types.IntFilter']
    streak_count: Union[_int, 'types.IntFilter']
    last_active_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    todos: 'TodoListRelationFilter'
    Todo_categories: 'TodoCategoryListRelationFilter'
    coin_transactions: 'CoinTransactionListRelationFilter'
    reward_redemptions: 'RewardRedemptionListRelationFilter'
    user_achievements: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password_hash: Union[_str, 'types.StringFilter']
    total_coins: Union[_int, 'types.IntFilter']
    streak_count: Union[_int, 'types.IntFilter']
    last_active_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    todos: 'TodoListRelationFilter'
    Todo_categories: 'TodoCategoryListRelationFilter'
    coin_transactions: 'CoinTransactionListRelationFilter'
    reward_redemptions: 'RewardRedemptionListRelationFilter'
    user_achievements: 'UserAchievementListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password_hash: Union[_str, 'types.StringWithAggregatesFilter']
    total_coins: Union[_int, 'types.IntWithAggregatesFilter']
    streak_count: Union[_int, 'types.IntWithAggregatesFilter']
    last_active_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password_hash: Union[_str, 'types.StringWithAggregatesFilter']
    total_coins: Union[_int, 'types.IntWithAggregatesFilter']
    streak_count: Union[_int, 'types.IntWithAggregatesFilter']
    last_active_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password_hash: Union[_str, 'types.StringWithAggregatesFilter']
    total_coins: Union[_int, 'types.IntWithAggregatesFilter']
    streak_count: Union[_int, 'types.IntWithAggregatesFilter']
    last_active_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password_hash: Union[_str, 'types.StringWithAggregatesFilter']
    total_coins: Union[_int, 'types.IntWithAggregatesFilter']
    streak_count: Union[_int, 'types.IntWithAggregatesFilter']
    last_active_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password_hash: Union[_str, 'types.StringWithAggregatesFilter']
    total_coins: Union[_int, 'types.IntWithAggregatesFilter']
    streak_count: Union[_int, 'types.IntWithAggregatesFilter']
    last_active_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    user_id: _int
    username: _str
    email: _str
    password_hash: _str
    total_coins: _int
    streak_count: _int
    last_active_date: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    user_id: float
    total_coins: float
    streak_count: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    user_id: _int
    total_coins: _int
    streak_count: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    user_id: _int
    username: _str
    email: _str
    password_hash: _str
    total_coins: _int
    streak_count: _int
    last_active_date: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    user_id: bool
    username: bool
    email: bool
    password_hash: bool
    total_coins: bool
    streak_count: bool
    last_active_date: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    user_id: bool
    username: bool
    email: bool
    password_hash: bool
    total_coins: bool
    streak_count: bool
    last_active_date: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    user_id: bool
    total_coins: bool
    streak_count: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'user_id': bool,
        'username': bool,
        'email': bool,
        'password_hash': bool,
        'total_coins': bool,
        'streak_count': bool,
        'last_active_date': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'user_id': int,
        'username': int,
        'email': int,
        'password_hash': int,
        'total_coins': int,
        'streak_count': int,
        'last_active_date': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'user_id',
    'username',
    'email',
    'password_hash',
    'total_coins',
    'streak_count',
    'last_active_date',
    'todos',
    'Todo_categories',
    'coin_transactions',
    'reward_redemptions',
    'user_achievements',
]
UserScalarFieldKeys = Literal[
    'user_id',
    'username',
    'email',
    'password_hash',
    'total_coins',
    'streak_count',
    'last_active_date',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'todos',
        'Todo_categories',
        'coin_transactions',
        'reward_redemptions',
        'user_achievements',
    ]

# TodoCategory types

class TodoCategoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the TodoCategory create method"""
    category_id: _int
    difficulty_multiplier: _float
    todos: 'TodoCreateManyNestedWithoutRelationsInput'
    user: 'UserCreateNestedWithoutRelationsInput'
    user_id: _int


class TodoCategoryCreateInput(TodoCategoryOptionalCreateInput):
    """Required arguments to the TodoCategory create method"""
    category_name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TodoCategoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the TodoCategory create method, without relations"""
    category_id: _int
    difficulty_multiplier: _float
    user_id: _int


class TodoCategoryCreateWithoutRelationsInput(TodoCategoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the TodoCategory create method, without relations"""
    category_name: _str

class TodoCategoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TodoCategoryCreateWithoutRelationsInput'
    where: 'TodoCategoryWhereUniqueInput'

class TodoCategoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TodoCategoryCreateWithoutRelationsInput'
    connect: 'TodoCategoryWhereUniqueInput'
    connect_or_create: 'TodoCategoryConnectOrCreateWithoutRelationsInput'


class TodoCategoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TodoCategoryCreateWithoutRelationsInput', List['TodoCategoryCreateWithoutRelationsInput']]
    connect: Union['TodoCategoryWhereUniqueInput', List['TodoCategoryWhereUniqueInput']]
    connect_or_create: Union['TodoCategoryConnectOrCreateWithoutRelationsInput', List['TodoCategoryConnectOrCreateWithoutRelationsInput']]

_TodoCategoryWhereUnique_category_id_Input = TypedDict(
    '_TodoCategoryWhereUnique_category_id_Input',
    {
        'category_id': '_int',
    },
    total=True
)

TodoCategoryWhereUniqueInput = _TodoCategoryWhereUnique_category_id_Input


class TodoCategoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    category_id: Union[AtomicIntInput, _int]
    category_name: _str
    difficulty_multiplier: Union[AtomicFloatInput, _float]
    todos: 'TodoUpdateManyWithoutRelationsInput'
    user: 'UserUpdateOneWithoutRelationsInput'


class TodoCategoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    category_id: Union[AtomicIntInput, _int]
    category_name: _str
    difficulty_multiplier: Union[AtomicFloatInput, _float]


class TodoCategoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TodoCategoryCreateWithoutRelationsInput']
    connect: List['TodoCategoryWhereUniqueInput']
    connect_or_create: List['TodoCategoryConnectOrCreateWithoutRelationsInput']
    set: List['TodoCategoryWhereUniqueInput']
    disconnect: List['TodoCategoryWhereUniqueInput']
    delete: List['TodoCategoryWhereUniqueInput']

    # TODO
    # update: List['TodoCategoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TodoCategoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TodoCategoryScalarWhereInput']
    # upsert: List['TodoCategoryUpserteWithWhereUniqueWithoutRelationsInput']


class TodoCategoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TodoCategoryCreateWithoutRelationsInput'
    connect: 'TodoCategoryWhereUniqueInput'
    connect_or_create: 'TodoCategoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TodoCategoryUpdateInput'
    # upsert: 'TodoCategoryUpsertWithoutRelationsInput'


class TodoCategoryUpsertInput(TypedDict):
    create: 'TodoCategoryCreateInput'
    update: 'TodoCategoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_TodoCategory_category_id_OrderByInput = TypedDict(
    '_TodoCategory_category_id_OrderByInput',
    {
        'category_id': 'SortOrder',
    },
    total=True
)

_TodoCategory_category_name_OrderByInput = TypedDict(
    '_TodoCategory_category_name_OrderByInput',
    {
        'category_name': 'SortOrder',
    },
    total=True
)

_TodoCategory_difficulty_multiplier_OrderByInput = TypedDict(
    '_TodoCategory_difficulty_multiplier_OrderByInput',
    {
        'difficulty_multiplier': 'SortOrder',
    },
    total=True
)

_TodoCategory_user_id_OrderByInput = TypedDict(
    '_TodoCategory_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_TodoCategory_RelevanceInner = TypedDict(
    '_TodoCategory_RelevanceInner',
    {
        'fields': 'List[TodoCategoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_TodoCategory_RelevanceOrderByInput = TypedDict(
    '_TodoCategory_RelevanceOrderByInput',
    {
        '_relevance': '_TodoCategory_RelevanceInner',
    },
    total=True
)

TodoCategoryOrderByInput = Union[
    '_TodoCategory_category_id_OrderByInput',
    '_TodoCategory_category_name_OrderByInput',
    '_TodoCategory_difficulty_multiplier_OrderByInput',
    '_TodoCategory_user_id_OrderByInput',
    '_TodoCategory_RelevanceOrderByInput',
]



# recursive TodoCategory types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TodoCategoryRelationFilter = TypedDict(
    'TodoCategoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TodoCategoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TodoCategoryInclude(TypedDict, total=False):
    """TodoCategory relational arguments"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoCategory']
    user: Union[bool, 'UserArgsFromTodoCategory']


    

class UserIncludeFromTodoCategory(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoCategoryRecursive1']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromTodoCategoryRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoCategoryRecursive1']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoCategoryRecursive1']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoCategoryRecursive1']


class UserIncludeFromTodoCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoCategoryRecursive2']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromTodoCategoryRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoCategoryRecursive2']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoCategoryRecursive2']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoCategoryRecursive2']


class UserIncludeFromTodoCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoCategoryRecursive3']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromTodoCategoryRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoCategoryRecursive3']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoCategoryRecursive3']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoCategoryRecursive3']


class UserIncludeFromTodoCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoCategoryRecursive4']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromTodoCategoryRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoCategoryRecursive4']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoCategoryRecursive4']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoCategoryRecursive4']


class UserIncludeFromTodoCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for TodoCategory"""

    

class UserArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    
    

class FindManyUserArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class TodoCategoryIncludeFromTodoCategory(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoCategoryRecursive1']
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive1']


class TodoCategoryIncludeFromTodoCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoCategoryRecursive2']
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive2']


class TodoCategoryIncludeFromTodoCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoCategoryRecursive3']
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive3']


class TodoCategoryIncludeFromTodoCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoCategoryRecursive4']
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive4']


class TodoCategoryIncludeFromTodoCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for TodoCategory"""

    

class TodoCategoryArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class TodoCategoryArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class TodoCategoryArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class TodoCategoryArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class TodoCategoryArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    
    

class FindManyTodoCategoryArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class FindManyTodoCategoryArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class FindManyTodoCategoryArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class FindManyTodoCategoryArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class FindManyTodoCategoryArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    
    

class TodoIncludeFromTodoCategory(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive1']
    category: Union[bool, 'TodoCategoryArgsFromTodoCategoryRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoCategoryRecursive1']


class TodoIncludeFromTodoCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive2']
    category: Union[bool, 'TodoCategoryArgsFromTodoCategoryRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoCategoryRecursive2']


class TodoIncludeFromTodoCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive3']
    category: Union[bool, 'TodoCategoryArgsFromTodoCategoryRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoCategoryRecursive3']


class TodoIncludeFromTodoCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive4']
    category: Union[bool, 'TodoCategoryArgsFromTodoCategoryRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoCategoryRecursive4']


class TodoIncludeFromTodoCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for TodoCategory"""

    

class TodoArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'TodoIncludeFromTodoRecursive1'


class TodoArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'TodoIncludeFromTodoRecursive2'


class TodoArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'TodoIncludeFromTodoRecursive3'


class TodoArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'TodoIncludeFromTodoRecursive4'


class TodoArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    
    

class FindManyTodoArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive1'


class FindManyTodoArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive2'


class FindManyTodoArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive3'


class FindManyTodoArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive4'


class FindManyTodoArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    
    

class CoinTransactionIncludeFromTodoCategory(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive1']
    related_todo: Union[bool, 'TodoArgsFromTodoCategoryRecursive1']


class CoinTransactionIncludeFromTodoCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive2']
    related_todo: Union[bool, 'TodoArgsFromTodoCategoryRecursive2']


class CoinTransactionIncludeFromTodoCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive3']
    related_todo: Union[bool, 'TodoArgsFromTodoCategoryRecursive3']


class CoinTransactionIncludeFromTodoCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive4']
    related_todo: Union[bool, 'TodoArgsFromTodoCategoryRecursive4']


class CoinTransactionIncludeFromTodoCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for TodoCategory"""

    

class CoinTransactionArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class CoinTransactionArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class CoinTransactionArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class CoinTransactionArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class CoinTransactionArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    
    

class FindManyCoinTransactionArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class FindManyCoinTransactionArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class FindManyCoinTransactionArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class FindManyCoinTransactionArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class FindManyCoinTransactionArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    
    

class RewardIncludeFromTodoCategory(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoCategoryRecursive1']


class RewardIncludeFromTodoCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoCategoryRecursive2']


class RewardIncludeFromTodoCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoCategoryRecursive3']


class RewardIncludeFromTodoCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoCategoryRecursive4']


class RewardIncludeFromTodoCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for TodoCategory"""

    

class RewardArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'RewardIncludeFromRewardRecursive1'


class RewardArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'RewardIncludeFromRewardRecursive2'


class RewardArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'RewardIncludeFromRewardRecursive3'


class RewardArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'RewardIncludeFromRewardRecursive4'


class RewardArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    
    

class FindManyRewardArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive1'


class FindManyRewardArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive2'


class FindManyRewardArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive3'


class FindManyRewardArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive4'


class FindManyRewardArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    
    

class RewardRedemptionIncludeFromTodoCategory(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive1']
    reward: Union[bool, 'RewardArgsFromTodoCategoryRecursive1']


class RewardRedemptionIncludeFromTodoCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive2']
    reward: Union[bool, 'RewardArgsFromTodoCategoryRecursive2']


class RewardRedemptionIncludeFromTodoCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive3']
    reward: Union[bool, 'RewardArgsFromTodoCategoryRecursive3']


class RewardRedemptionIncludeFromTodoCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive4']
    reward: Union[bool, 'RewardArgsFromTodoCategoryRecursive4']


class RewardRedemptionIncludeFromTodoCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for TodoCategory"""

    

class RewardRedemptionArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class RewardRedemptionArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class RewardRedemptionArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class RewardRedemptionArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class RewardRedemptionArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    
    

class FindManyRewardRedemptionArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class FindManyRewardRedemptionArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class FindManyRewardRedemptionArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class FindManyRewardRedemptionArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class FindManyRewardRedemptionArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    
    

class AchievementIncludeFromTodoCategory(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoCategoryRecursive1']


class AchievementIncludeFromTodoCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoCategoryRecursive2']


class AchievementIncludeFromTodoCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoCategoryRecursive3']


class AchievementIncludeFromTodoCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoCategoryRecursive4']


class AchievementIncludeFromTodoCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for TodoCategory"""

    

class AchievementArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    
    

class FindManyAchievementArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromTodoCategory(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive1']
    achievement: Union[bool, 'AchievementArgsFromTodoCategoryRecursive1']


class UserAchievementIncludeFromTodoCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive2']
    achievement: Union[bool, 'AchievementArgsFromTodoCategoryRecursive2']


class UserAchievementIncludeFromTodoCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive3']
    achievement: Union[bool, 'AchievementArgsFromTodoCategoryRecursive3']


class UserAchievementIncludeFromTodoCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for TodoCategory"""
    user: Union[bool, 'UserArgsFromTodoCategoryRecursive4']
    achievement: Union[bool, 'AchievementArgsFromTodoCategoryRecursive4']


class UserAchievementIncludeFromTodoCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for TodoCategory"""

    

class UserAchievementArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    
    

class FindManyUserAchievementArgsFromTodoCategory(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromTodoCategoryRecursive1(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromTodoCategoryRecursive2(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromTodoCategoryRecursive3(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromTodoCategoryRecursive4(TypedDict, total=False):
    """Arguments for TodoCategory"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyTodoCategoryArgs = FindManyTodoCategoryArgsFromTodoCategory
FindFirstTodoCategoryArgs = FindManyTodoCategoryArgsFromTodoCategory


    

class TodoCategoryWhereInput(TypedDict, total=False):
    """TodoCategory arguments for searching"""
    category_id: Union[_int, 'types.IntFilter']
    category_name: Union[_str, 'types.StringFilter']
    difficulty_multiplier: Union[_float, 'types.FloatFilter']
    todos: 'TodoListRelationFilter'
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['TodoCategoryWhereInputRecursive1', List['TodoCategoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TodoCategoryWhereInputRecursive1']
    OR: List['TodoCategoryWhereInputRecursive1']
    NOT: List['TodoCategoryWhereInputRecursive1']


class TodoCategoryWhereInputRecursive1(TypedDict, total=False):
    """TodoCategory arguments for searching"""
    category_id: Union[_int, 'types.IntFilter']
    category_name: Union[_str, 'types.StringFilter']
    difficulty_multiplier: Union[_float, 'types.FloatFilter']
    todos: 'TodoListRelationFilter'
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['TodoCategoryWhereInputRecursive2', List['TodoCategoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TodoCategoryWhereInputRecursive2']
    OR: List['TodoCategoryWhereInputRecursive2']
    NOT: List['TodoCategoryWhereInputRecursive2']


class TodoCategoryWhereInputRecursive2(TypedDict, total=False):
    """TodoCategory arguments for searching"""
    category_id: Union[_int, 'types.IntFilter']
    category_name: Union[_str, 'types.StringFilter']
    difficulty_multiplier: Union[_float, 'types.FloatFilter']
    todos: 'TodoListRelationFilter'
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['TodoCategoryWhereInputRecursive3', List['TodoCategoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TodoCategoryWhereInputRecursive3']
    OR: List['TodoCategoryWhereInputRecursive3']
    NOT: List['TodoCategoryWhereInputRecursive3']


class TodoCategoryWhereInputRecursive3(TypedDict, total=False):
    """TodoCategory arguments for searching"""
    category_id: Union[_int, 'types.IntFilter']
    category_name: Union[_str, 'types.StringFilter']
    difficulty_multiplier: Union[_float, 'types.FloatFilter']
    todos: 'TodoListRelationFilter'
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['TodoCategoryWhereInputRecursive4', List['TodoCategoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TodoCategoryWhereInputRecursive4']
    OR: List['TodoCategoryWhereInputRecursive4']
    NOT: List['TodoCategoryWhereInputRecursive4']


class TodoCategoryWhereInputRecursive4(TypedDict, total=False):
    """TodoCategory arguments for searching"""
    category_id: Union[_int, 'types.IntFilter']
    category_name: Union[_str, 'types.StringFilter']
    difficulty_multiplier: Union[_float, 'types.FloatFilter']
    todos: 'TodoListRelationFilter'
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']



# aggregate TodoCategory types


    

class TodoCategoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """TodoCategory arguments for searching"""
    category_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_name: Union[_str, 'types.StringWithAggregatesFilter']
    difficulty_multiplier: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TodoCategoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['TodoCategoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TodoCategoryScalarWhereWithAggregatesInputRecursive1']


class TodoCategoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """TodoCategory arguments for searching"""
    category_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_name: Union[_str, 'types.StringWithAggregatesFilter']
    difficulty_multiplier: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TodoCategoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['TodoCategoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TodoCategoryScalarWhereWithAggregatesInputRecursive2']


class TodoCategoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """TodoCategory arguments for searching"""
    category_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_name: Union[_str, 'types.StringWithAggregatesFilter']
    difficulty_multiplier: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TodoCategoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['TodoCategoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TodoCategoryScalarWhereWithAggregatesInputRecursive3']


class TodoCategoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """TodoCategory arguments for searching"""
    category_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_name: Union[_str, 'types.StringWithAggregatesFilter']
    difficulty_multiplier: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TodoCategoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['TodoCategoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TodoCategoryScalarWhereWithAggregatesInputRecursive4']


class TodoCategoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """TodoCategory arguments for searching"""
    category_id: Union[_int, 'types.IntWithAggregatesFilter']
    category_name: Union[_str, 'types.StringWithAggregatesFilter']
    difficulty_multiplier: Union[_float, 'types.FloatWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']



class TodoCategoryGroupByOutput(TypedDict, total=False):
    category_id: _int
    category_name: _str
    difficulty_multiplier: _float
    user_id: _int
    _sum: 'TodoCategorySumAggregateOutput'
    _avg: 'TodoCategoryAvgAggregateOutput'
    _min: 'TodoCategoryMinAggregateOutput'
    _max: 'TodoCategoryMaxAggregateOutput'
    _count: 'TodoCategoryCountAggregateOutput'


class TodoCategoryAvgAggregateOutput(TypedDict, total=False):
    """TodoCategory output for aggregating averages"""
    category_id: float
    difficulty_multiplier: float
    user_id: float


class TodoCategorySumAggregateOutput(TypedDict, total=False):
    """TodoCategory output for aggregating sums"""
    category_id: _int
    difficulty_multiplier: _float
    user_id: _int


class TodoCategoryScalarAggregateOutput(TypedDict, total=False):
    """TodoCategory output including scalar fields"""
    category_id: _int
    category_name: _str
    difficulty_multiplier: _float
    user_id: _int


TodoCategoryMinAggregateOutput = TodoCategoryScalarAggregateOutput
TodoCategoryMaxAggregateOutput = TodoCategoryScalarAggregateOutput


class TodoCategoryMaxAggregateInput(TypedDict, total=False):
    """TodoCategory input for aggregating by max"""
    category_id: bool
    category_name: bool
    difficulty_multiplier: bool
    user_id: bool


class TodoCategoryMinAggregateInput(TypedDict, total=False):
    """TodoCategory input for aggregating by min"""
    category_id: bool
    category_name: bool
    difficulty_multiplier: bool
    user_id: bool


class TodoCategoryNumberAggregateInput(TypedDict, total=False):
    """TodoCategory input for aggregating numbers"""
    category_id: bool
    difficulty_multiplier: bool
    user_id: bool


TodoCategoryAvgAggregateInput = TodoCategoryNumberAggregateInput
TodoCategorySumAggregateInput = TodoCategoryNumberAggregateInput


TodoCategoryCountAggregateInput = TypedDict(
    'TodoCategoryCountAggregateInput',
    {
        'category_id': bool,
        'category_name': bool,
        'difficulty_multiplier': bool,
        'user_id': bool,
        '_all': bool,
    },
    total=False,
)

TodoCategoryCountAggregateOutput = TypedDict(
    'TodoCategoryCountAggregateOutput',
    {
        'category_id': int,
        'category_name': int,
        'difficulty_multiplier': int,
        'user_id': int,
        '_all': int,
    },
    total=False,
)


TodoCategoryKeys = Literal[
    'category_id',
    'category_name',
    'difficulty_multiplier',
    'todos',
    'user',
    'user_id',
]
TodoCategoryScalarFieldKeys = Literal[
    'category_id',
    'category_name',
    'difficulty_multiplier',
    'user_id',
]
TodoCategoryScalarFieldKeysT = TypeVar('TodoCategoryScalarFieldKeysT', bound=TodoCategoryScalarFieldKeys)

TodoCategoryRelationalFieldKeys = Literal[
        'todos',
        'user',
    ]

# Todo types

class TodoOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Todo create method"""
    todo_id: _int
    user: 'UserCreateNestedWithoutRelationsInput'
    user_id: _int
    description: Optional[_str]
    due_date: Optional[datetime.datetime]
    base_coin_value: _int
    completed: _bool
    completion_date: Optional[datetime.datetime]
    category: 'TodoCategoryCreateNestedWithoutRelationsInput'
    category_id: Optional[_int]
    coin_transactions: 'CoinTransactionCreateManyNestedWithoutRelationsInput'


class TodoCreateInput(TodoOptionalCreateInput):
    """Required arguments to the Todo create method"""
    title: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TodoOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Todo create method, without relations"""
    todo_id: _int
    user_id: _int
    description: Optional[_str]
    due_date: Optional[datetime.datetime]
    base_coin_value: _int
    completed: _bool
    completion_date: Optional[datetime.datetime]
    category_id: Optional[_int]


class TodoCreateWithoutRelationsInput(TodoOptionalCreateWithoutRelationsInput):
    """Required arguments to the Todo create method, without relations"""
    title: _str

class TodoConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TodoCreateWithoutRelationsInput'
    where: 'TodoWhereUniqueInput'

class TodoCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TodoCreateWithoutRelationsInput'
    connect: 'TodoWhereUniqueInput'
    connect_or_create: 'TodoConnectOrCreateWithoutRelationsInput'


class TodoCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TodoCreateWithoutRelationsInput', List['TodoCreateWithoutRelationsInput']]
    connect: Union['TodoWhereUniqueInput', List['TodoWhereUniqueInput']]
    connect_or_create: Union['TodoConnectOrCreateWithoutRelationsInput', List['TodoConnectOrCreateWithoutRelationsInput']]

_TodoWhereUnique_todo_id_Input = TypedDict(
    '_TodoWhereUnique_todo_id_Input',
    {
        'todo_id': '_int',
    },
    total=True
)

TodoWhereUniqueInput = _TodoWhereUnique_todo_id_Input


class TodoUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    todo_id: Union[AtomicIntInput, _int]
    user: 'UserUpdateOneWithoutRelationsInput'
    title: _str
    description: Optional[_str]
    due_date: Optional[datetime.datetime]
    base_coin_value: Union[AtomicIntInput, _int]
    completed: _bool
    completion_date: Optional[datetime.datetime]
    category: 'TodoCategoryUpdateOneWithoutRelationsInput'
    coin_transactions: 'CoinTransactionUpdateManyWithoutRelationsInput'


class TodoUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    todo_id: Union[AtomicIntInput, _int]
    title: _str
    description: Optional[_str]
    due_date: Optional[datetime.datetime]
    base_coin_value: Union[AtomicIntInput, _int]
    completed: _bool
    completion_date: Optional[datetime.datetime]


class TodoUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TodoCreateWithoutRelationsInput']
    connect: List['TodoWhereUniqueInput']
    connect_or_create: List['TodoConnectOrCreateWithoutRelationsInput']
    set: List['TodoWhereUniqueInput']
    disconnect: List['TodoWhereUniqueInput']
    delete: List['TodoWhereUniqueInput']

    # TODO
    # update: List['TodoUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TodoUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TodoScalarWhereInput']
    # upsert: List['TodoUpserteWithWhereUniqueWithoutRelationsInput']


class TodoUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TodoCreateWithoutRelationsInput'
    connect: 'TodoWhereUniqueInput'
    connect_or_create: 'TodoConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TodoUpdateInput'
    # upsert: 'TodoUpsertWithoutRelationsInput'


class TodoUpsertInput(TypedDict):
    create: 'TodoCreateInput'
    update: 'TodoUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Todo_todo_id_OrderByInput = TypedDict(
    '_Todo_todo_id_OrderByInput',
    {
        'todo_id': 'SortOrder',
    },
    total=True
)

_Todo_user_id_OrderByInput = TypedDict(
    '_Todo_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_Todo_title_OrderByInput = TypedDict(
    '_Todo_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Todo_description_OrderByInput = TypedDict(
    '_Todo_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Todo_due_date_OrderByInput = TypedDict(
    '_Todo_due_date_OrderByInput',
    {
        'due_date': 'SortOrder',
    },
    total=True
)

_Todo_base_coin_value_OrderByInput = TypedDict(
    '_Todo_base_coin_value_OrderByInput',
    {
        'base_coin_value': 'SortOrder',
    },
    total=True
)

_Todo_completed_OrderByInput = TypedDict(
    '_Todo_completed_OrderByInput',
    {
        'completed': 'SortOrder',
    },
    total=True
)

_Todo_completion_date_OrderByInput = TypedDict(
    '_Todo_completion_date_OrderByInput',
    {
        'completion_date': 'SortOrder',
    },
    total=True
)

_Todo_category_id_OrderByInput = TypedDict(
    '_Todo_category_id_OrderByInput',
    {
        'category_id': 'SortOrder',
    },
    total=True
)

_Todo_RelevanceInner = TypedDict(
    '_Todo_RelevanceInner',
    {
        'fields': 'List[TodoScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Todo_RelevanceOrderByInput = TypedDict(
    '_Todo_RelevanceOrderByInput',
    {
        '_relevance': '_Todo_RelevanceInner',
    },
    total=True
)

TodoOrderByInput = Union[
    '_Todo_todo_id_OrderByInput',
    '_Todo_user_id_OrderByInput',
    '_Todo_title_OrderByInput',
    '_Todo_description_OrderByInput',
    '_Todo_due_date_OrderByInput',
    '_Todo_base_coin_value_OrderByInput',
    '_Todo_completed_OrderByInput',
    '_Todo_completion_date_OrderByInput',
    '_Todo_category_id_OrderByInput',
    '_Todo_RelevanceOrderByInput',
]



# recursive Todo types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TodoRelationFilter = TypedDict(
    'TodoRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TodoListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TodoInclude(TypedDict, total=False):
    """Todo relational arguments"""
    user: Union[bool, 'UserArgsFromTodo']
    category: Union[bool, 'TodoCategoryArgsFromTodo']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodo']


    

class UserIncludeFromTodo(TypedDict, total=False):
    """Relational arguments for Todo"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoRecursive1']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromTodoRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoRecursive1']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoRecursive1']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoRecursive1']


class UserIncludeFromTodoRecursive1(TypedDict, total=False):
    """Relational arguments for Todo"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoRecursive2']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromTodoRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoRecursive2']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoRecursive2']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoRecursive2']


class UserIncludeFromTodoRecursive2(TypedDict, total=False):
    """Relational arguments for Todo"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoRecursive3']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromTodoRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoRecursive3']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoRecursive3']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoRecursive3']


class UserIncludeFromTodoRecursive3(TypedDict, total=False):
    """Relational arguments for Todo"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoRecursive4']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromTodoRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoRecursive4']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoRecursive4']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoRecursive4']


class UserIncludeFromTodoRecursive4(TypedDict, total=False):
    """Relational arguments for Todo"""

    

class UserArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    
    

class FindManyUserArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class TodoCategoryIncludeFromTodo(TypedDict, total=False):
    """Relational arguments for Todo"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoRecursive1']
    user: Union[bool, 'UserArgsFromTodoRecursive1']


class TodoCategoryIncludeFromTodoRecursive1(TypedDict, total=False):
    """Relational arguments for Todo"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoRecursive2']
    user: Union[bool, 'UserArgsFromTodoRecursive2']


class TodoCategoryIncludeFromTodoRecursive2(TypedDict, total=False):
    """Relational arguments for Todo"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoRecursive3']
    user: Union[bool, 'UserArgsFromTodoRecursive3']


class TodoCategoryIncludeFromTodoRecursive3(TypedDict, total=False):
    """Relational arguments for Todo"""
    todos: Union[bool, 'FindManyTodoArgsFromTodoRecursive4']
    user: Union[bool, 'UserArgsFromTodoRecursive4']


class TodoCategoryIncludeFromTodoRecursive4(TypedDict, total=False):
    """Relational arguments for Todo"""

    

class TodoCategoryArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class TodoCategoryArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class TodoCategoryArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class TodoCategoryArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class TodoCategoryArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    
    

class FindManyTodoCategoryArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class FindManyTodoCategoryArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class FindManyTodoCategoryArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class FindManyTodoCategoryArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class FindManyTodoCategoryArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    
    

class TodoIncludeFromTodo(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive1']
    category: Union[bool, 'TodoCategoryArgsFromTodoRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoRecursive1']


class TodoIncludeFromTodoRecursive1(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive2']
    category: Union[bool, 'TodoCategoryArgsFromTodoRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoRecursive2']


class TodoIncludeFromTodoRecursive2(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive3']
    category: Union[bool, 'TodoCategoryArgsFromTodoRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoRecursive3']


class TodoIncludeFromTodoRecursive3(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive4']
    category: Union[bool, 'TodoCategoryArgsFromTodoRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromTodoRecursive4']


class TodoIncludeFromTodoRecursive4(TypedDict, total=False):
    """Relational arguments for Todo"""

    

class TodoArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'TodoIncludeFromTodoRecursive1'


class TodoArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'TodoIncludeFromTodoRecursive2'


class TodoArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'TodoIncludeFromTodoRecursive3'


class TodoArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'TodoIncludeFromTodoRecursive4'


class TodoArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    
    

class FindManyTodoArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive1'


class FindManyTodoArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive2'


class FindManyTodoArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive3'


class FindManyTodoArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive4'


class FindManyTodoArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    
    

class CoinTransactionIncludeFromTodo(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive1']
    related_todo: Union[bool, 'TodoArgsFromTodoRecursive1']


class CoinTransactionIncludeFromTodoRecursive1(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive2']
    related_todo: Union[bool, 'TodoArgsFromTodoRecursive2']


class CoinTransactionIncludeFromTodoRecursive2(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive3']
    related_todo: Union[bool, 'TodoArgsFromTodoRecursive3']


class CoinTransactionIncludeFromTodoRecursive3(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive4']
    related_todo: Union[bool, 'TodoArgsFromTodoRecursive4']


class CoinTransactionIncludeFromTodoRecursive4(TypedDict, total=False):
    """Relational arguments for Todo"""

    

class CoinTransactionArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class CoinTransactionArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class CoinTransactionArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class CoinTransactionArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class CoinTransactionArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    
    

class FindManyCoinTransactionArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class FindManyCoinTransactionArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class FindManyCoinTransactionArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class FindManyCoinTransactionArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class FindManyCoinTransactionArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    
    

class RewardIncludeFromTodo(TypedDict, total=False):
    """Relational arguments for Todo"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoRecursive1']


class RewardIncludeFromTodoRecursive1(TypedDict, total=False):
    """Relational arguments for Todo"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoRecursive2']


class RewardIncludeFromTodoRecursive2(TypedDict, total=False):
    """Relational arguments for Todo"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoRecursive3']


class RewardIncludeFromTodoRecursive3(TypedDict, total=False):
    """Relational arguments for Todo"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromTodoRecursive4']


class RewardIncludeFromTodoRecursive4(TypedDict, total=False):
    """Relational arguments for Todo"""

    

class RewardArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'RewardIncludeFromRewardRecursive1'


class RewardArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'RewardIncludeFromRewardRecursive2'


class RewardArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'RewardIncludeFromRewardRecursive3'


class RewardArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'RewardIncludeFromRewardRecursive4'


class RewardArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    
    

class FindManyRewardArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive1'


class FindManyRewardArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive2'


class FindManyRewardArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive3'


class FindManyRewardArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive4'


class FindManyRewardArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    
    

class RewardRedemptionIncludeFromTodo(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive1']
    reward: Union[bool, 'RewardArgsFromTodoRecursive1']


class RewardRedemptionIncludeFromTodoRecursive1(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive2']
    reward: Union[bool, 'RewardArgsFromTodoRecursive2']


class RewardRedemptionIncludeFromTodoRecursive2(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive3']
    reward: Union[bool, 'RewardArgsFromTodoRecursive3']


class RewardRedemptionIncludeFromTodoRecursive3(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive4']
    reward: Union[bool, 'RewardArgsFromTodoRecursive4']


class RewardRedemptionIncludeFromTodoRecursive4(TypedDict, total=False):
    """Relational arguments for Todo"""

    

class RewardRedemptionArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class RewardRedemptionArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class RewardRedemptionArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class RewardRedemptionArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class RewardRedemptionArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    
    

class FindManyRewardRedemptionArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class FindManyRewardRedemptionArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class FindManyRewardRedemptionArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class FindManyRewardRedemptionArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class FindManyRewardRedemptionArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    
    

class AchievementIncludeFromTodo(TypedDict, total=False):
    """Relational arguments for Todo"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoRecursive1']


class AchievementIncludeFromTodoRecursive1(TypedDict, total=False):
    """Relational arguments for Todo"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoRecursive2']


class AchievementIncludeFromTodoRecursive2(TypedDict, total=False):
    """Relational arguments for Todo"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoRecursive3']


class AchievementIncludeFromTodoRecursive3(TypedDict, total=False):
    """Relational arguments for Todo"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromTodoRecursive4']


class AchievementIncludeFromTodoRecursive4(TypedDict, total=False):
    """Relational arguments for Todo"""

    

class AchievementArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    
    

class FindManyAchievementArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromTodo(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive1']
    achievement: Union[bool, 'AchievementArgsFromTodoRecursive1']


class UserAchievementIncludeFromTodoRecursive1(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive2']
    achievement: Union[bool, 'AchievementArgsFromTodoRecursive2']


class UserAchievementIncludeFromTodoRecursive2(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive3']
    achievement: Union[bool, 'AchievementArgsFromTodoRecursive3']


class UserAchievementIncludeFromTodoRecursive3(TypedDict, total=False):
    """Relational arguments for Todo"""
    user: Union[bool, 'UserArgsFromTodoRecursive4']
    achievement: Union[bool, 'AchievementArgsFromTodoRecursive4']


class UserAchievementIncludeFromTodoRecursive4(TypedDict, total=False):
    """Relational arguments for Todo"""

    

class UserAchievementArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    
    

class FindManyUserAchievementArgsFromTodo(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromTodoRecursive1(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromTodoRecursive2(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromTodoRecursive3(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromTodoRecursive4(TypedDict, total=False):
    """Arguments for Todo"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyTodoArgs = FindManyTodoArgsFromTodo
FindFirstTodoArgs = FindManyTodoArgsFromTodo


    

class TodoWhereInput(TypedDict, total=False):
    """Todo arguments for searching"""
    todo_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    due_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    base_coin_value: Union[_int, 'types.IntFilter']
    completed: Union[_bool, 'types.BooleanFilter']
    completion_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    category: 'TodoCategoryRelationFilter'
    category_id: Union[None, _int, 'types.IntFilter']
    coin_transactions: 'CoinTransactionListRelationFilter'

    # should be noted that AND and NOT should be Union['TodoWhereInputRecursive1', List['TodoWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TodoWhereInputRecursive1']
    OR: List['TodoWhereInputRecursive1']
    NOT: List['TodoWhereInputRecursive1']


class TodoWhereInputRecursive1(TypedDict, total=False):
    """Todo arguments for searching"""
    todo_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    due_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    base_coin_value: Union[_int, 'types.IntFilter']
    completed: Union[_bool, 'types.BooleanFilter']
    completion_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    category: 'TodoCategoryRelationFilter'
    category_id: Union[None, _int, 'types.IntFilter']
    coin_transactions: 'CoinTransactionListRelationFilter'

    # should be noted that AND and NOT should be Union['TodoWhereInputRecursive2', List['TodoWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TodoWhereInputRecursive2']
    OR: List['TodoWhereInputRecursive2']
    NOT: List['TodoWhereInputRecursive2']


class TodoWhereInputRecursive2(TypedDict, total=False):
    """Todo arguments for searching"""
    todo_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    due_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    base_coin_value: Union[_int, 'types.IntFilter']
    completed: Union[_bool, 'types.BooleanFilter']
    completion_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    category: 'TodoCategoryRelationFilter'
    category_id: Union[None, _int, 'types.IntFilter']
    coin_transactions: 'CoinTransactionListRelationFilter'

    # should be noted that AND and NOT should be Union['TodoWhereInputRecursive3', List['TodoWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TodoWhereInputRecursive3']
    OR: List['TodoWhereInputRecursive3']
    NOT: List['TodoWhereInputRecursive3']


class TodoWhereInputRecursive3(TypedDict, total=False):
    """Todo arguments for searching"""
    todo_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    due_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    base_coin_value: Union[_int, 'types.IntFilter']
    completed: Union[_bool, 'types.BooleanFilter']
    completion_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    category: 'TodoCategoryRelationFilter'
    category_id: Union[None, _int, 'types.IntFilter']
    coin_transactions: 'CoinTransactionListRelationFilter'

    # should be noted that AND and NOT should be Union['TodoWhereInputRecursive4', List['TodoWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TodoWhereInputRecursive4']
    OR: List['TodoWhereInputRecursive4']
    NOT: List['TodoWhereInputRecursive4']


class TodoWhereInputRecursive4(TypedDict, total=False):
    """Todo arguments for searching"""
    todo_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    due_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    base_coin_value: Union[_int, 'types.IntFilter']
    completed: Union[_bool, 'types.BooleanFilter']
    completion_date: Union[None, datetime.datetime, 'types.DateTimeFilter']
    category: 'TodoCategoryRelationFilter'
    category_id: Union[None, _int, 'types.IntFilter']
    coin_transactions: 'CoinTransactionListRelationFilter'



# aggregate Todo types


    

class TodoScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Todo arguments for searching"""
    todo_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    due_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    base_coin_value: Union[_int, 'types.IntWithAggregatesFilter']
    completed: Union[_bool, 'types.BooleanWithAggregatesFilter']
    completion_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TodoScalarWhereWithAggregatesInputRecursive1']
    OR: List['TodoScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TodoScalarWhereWithAggregatesInputRecursive1']


class TodoScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Todo arguments for searching"""
    todo_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    due_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    base_coin_value: Union[_int, 'types.IntWithAggregatesFilter']
    completed: Union[_bool, 'types.BooleanWithAggregatesFilter']
    completion_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TodoScalarWhereWithAggregatesInputRecursive2']
    OR: List['TodoScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TodoScalarWhereWithAggregatesInputRecursive2']


class TodoScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Todo arguments for searching"""
    todo_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    due_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    base_coin_value: Union[_int, 'types.IntWithAggregatesFilter']
    completed: Union[_bool, 'types.BooleanWithAggregatesFilter']
    completion_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TodoScalarWhereWithAggregatesInputRecursive3']
    OR: List['TodoScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TodoScalarWhereWithAggregatesInputRecursive3']


class TodoScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Todo arguments for searching"""
    todo_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    due_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    base_coin_value: Union[_int, 'types.IntWithAggregatesFilter']
    completed: Union[_bool, 'types.BooleanWithAggregatesFilter']
    completion_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TodoScalarWhereWithAggregatesInputRecursive4']
    OR: List['TodoScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TodoScalarWhereWithAggregatesInputRecursive4']


class TodoScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Todo arguments for searching"""
    todo_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    due_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    base_coin_value: Union[_int, 'types.IntWithAggregatesFilter']
    completed: Union[_bool, 'types.BooleanWithAggregatesFilter']
    completion_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    category_id: Union[_int, 'types.IntWithAggregatesFilter']



class TodoGroupByOutput(TypedDict, total=False):
    todo_id: _int
    user_id: _int
    title: _str
    description: _str
    due_date: datetime.datetime
    base_coin_value: _int
    completed: _bool
    completion_date: datetime.datetime
    category_id: _int
    _sum: 'TodoSumAggregateOutput'
    _avg: 'TodoAvgAggregateOutput'
    _min: 'TodoMinAggregateOutput'
    _max: 'TodoMaxAggregateOutput'
    _count: 'TodoCountAggregateOutput'


class TodoAvgAggregateOutput(TypedDict, total=False):
    """Todo output for aggregating averages"""
    todo_id: float
    user_id: float
    base_coin_value: float
    category_id: float


class TodoSumAggregateOutput(TypedDict, total=False):
    """Todo output for aggregating sums"""
    todo_id: _int
    user_id: _int
    base_coin_value: _int
    category_id: _int


class TodoScalarAggregateOutput(TypedDict, total=False):
    """Todo output including scalar fields"""
    todo_id: _int
    user_id: _int
    title: _str
    description: _str
    due_date: datetime.datetime
    base_coin_value: _int
    completed: _bool
    completion_date: datetime.datetime
    category_id: _int


TodoMinAggregateOutput = TodoScalarAggregateOutput
TodoMaxAggregateOutput = TodoScalarAggregateOutput


class TodoMaxAggregateInput(TypedDict, total=False):
    """Todo input for aggregating by max"""
    todo_id: bool
    user_id: bool
    title: bool
    description: bool
    due_date: bool
    base_coin_value: bool
    completed: bool
    completion_date: bool
    category_id: bool


class TodoMinAggregateInput(TypedDict, total=False):
    """Todo input for aggregating by min"""
    todo_id: bool
    user_id: bool
    title: bool
    description: bool
    due_date: bool
    base_coin_value: bool
    completed: bool
    completion_date: bool
    category_id: bool


class TodoNumberAggregateInput(TypedDict, total=False):
    """Todo input for aggregating numbers"""
    todo_id: bool
    user_id: bool
    base_coin_value: bool
    category_id: bool


TodoAvgAggregateInput = TodoNumberAggregateInput
TodoSumAggregateInput = TodoNumberAggregateInput


TodoCountAggregateInput = TypedDict(
    'TodoCountAggregateInput',
    {
        'todo_id': bool,
        'user_id': bool,
        'title': bool,
        'description': bool,
        'due_date': bool,
        'base_coin_value': bool,
        'completed': bool,
        'completion_date': bool,
        'category_id': bool,
        '_all': bool,
    },
    total=False,
)

TodoCountAggregateOutput = TypedDict(
    'TodoCountAggregateOutput',
    {
        'todo_id': int,
        'user_id': int,
        'title': int,
        'description': int,
        'due_date': int,
        'base_coin_value': int,
        'completed': int,
        'completion_date': int,
        'category_id': int,
        '_all': int,
    },
    total=False,
)


TodoKeys = Literal[
    'todo_id',
    'user',
    'user_id',
    'title',
    'description',
    'due_date',
    'base_coin_value',
    'completed',
    'completion_date',
    'category',
    'category_id',
    'coin_transactions',
]
TodoScalarFieldKeys = Literal[
    'todo_id',
    'user_id',
    'title',
    'description',
    'due_date',
    'base_coin_value',
    'completed',
    'completion_date',
    'category_id',
]
TodoScalarFieldKeysT = TypeVar('TodoScalarFieldKeysT', bound=TodoScalarFieldKeys)

TodoRelationalFieldKeys = Literal[
        'user',
        'category',
        'coin_transactions',
    ]

# CoinTransaction types

class CoinTransactionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the CoinTransaction create method"""
    transaction_id: _int
    user: 'UserCreateNestedWithoutRelationsInput'
    user_id: _int
    transaction_time: datetime.datetime
    related_todo: 'TodoCreateNestedWithoutRelationsInput'
    related_todo_id: Optional[_int]


class CoinTransactionCreateInput(CoinTransactionOptionalCreateInput):
    """Required arguments to the CoinTransaction create method"""
    amount: _int
    transaction_type: 'enums.TransactionType'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CoinTransactionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the CoinTransaction create method, without relations"""
    transaction_id: _int
    user_id: _int
    transaction_time: datetime.datetime
    related_todo_id: Optional[_int]


class CoinTransactionCreateWithoutRelationsInput(CoinTransactionOptionalCreateWithoutRelationsInput):
    """Required arguments to the CoinTransaction create method, without relations"""
    amount: _int
    transaction_type: 'enums.TransactionType'

class CoinTransactionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CoinTransactionCreateWithoutRelationsInput'
    where: 'CoinTransactionWhereUniqueInput'

class CoinTransactionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CoinTransactionCreateWithoutRelationsInput'
    connect: 'CoinTransactionWhereUniqueInput'
    connect_or_create: 'CoinTransactionConnectOrCreateWithoutRelationsInput'


class CoinTransactionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CoinTransactionCreateWithoutRelationsInput', List['CoinTransactionCreateWithoutRelationsInput']]
    connect: Union['CoinTransactionWhereUniqueInput', List['CoinTransactionWhereUniqueInput']]
    connect_or_create: Union['CoinTransactionConnectOrCreateWithoutRelationsInput', List['CoinTransactionConnectOrCreateWithoutRelationsInput']]

_CoinTransactionWhereUnique_transaction_id_Input = TypedDict(
    '_CoinTransactionWhereUnique_transaction_id_Input',
    {
        'transaction_id': '_int',
    },
    total=True
)

CoinTransactionWhereUniqueInput = _CoinTransactionWhereUnique_transaction_id_Input


class CoinTransactionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    transaction_id: Union[AtomicIntInput, _int]
    user: 'UserUpdateOneWithoutRelationsInput'
    amount: Union[AtomicIntInput, _int]
    transaction_type: 'enums.TransactionType'
    transaction_time: datetime.datetime
    related_todo: 'TodoUpdateOneWithoutRelationsInput'


class CoinTransactionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    transaction_id: Union[AtomicIntInput, _int]
    amount: Union[AtomicIntInput, _int]
    transaction_type: 'enums.TransactionType'
    transaction_time: datetime.datetime


class CoinTransactionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CoinTransactionCreateWithoutRelationsInput']
    connect: List['CoinTransactionWhereUniqueInput']
    connect_or_create: List['CoinTransactionConnectOrCreateWithoutRelationsInput']
    set: List['CoinTransactionWhereUniqueInput']
    disconnect: List['CoinTransactionWhereUniqueInput']
    delete: List['CoinTransactionWhereUniqueInput']

    # TODO
    # update: List['CoinTransactionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CoinTransactionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CoinTransactionScalarWhereInput']
    # upsert: List['CoinTransactionUpserteWithWhereUniqueWithoutRelationsInput']


class CoinTransactionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CoinTransactionCreateWithoutRelationsInput'
    connect: 'CoinTransactionWhereUniqueInput'
    connect_or_create: 'CoinTransactionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CoinTransactionUpdateInput'
    # upsert: 'CoinTransactionUpsertWithoutRelationsInput'


class CoinTransactionUpsertInput(TypedDict):
    create: 'CoinTransactionCreateInput'
    update: 'CoinTransactionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_CoinTransaction_transaction_id_OrderByInput = TypedDict(
    '_CoinTransaction_transaction_id_OrderByInput',
    {
        'transaction_id': 'SortOrder',
    },
    total=True
)

_CoinTransaction_user_id_OrderByInput = TypedDict(
    '_CoinTransaction_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_CoinTransaction_amount_OrderByInput = TypedDict(
    '_CoinTransaction_amount_OrderByInput',
    {
        'amount': 'SortOrder',
    },
    total=True
)

_CoinTransaction_transaction_type_OrderByInput = TypedDict(
    '_CoinTransaction_transaction_type_OrderByInput',
    {
        'transaction_type': 'SortOrder',
    },
    total=True
)

_CoinTransaction_transaction_time_OrderByInput = TypedDict(
    '_CoinTransaction_transaction_time_OrderByInput',
    {
        'transaction_time': 'SortOrder',
    },
    total=True
)

_CoinTransaction_related_todo_id_OrderByInput = TypedDict(
    '_CoinTransaction_related_todo_id_OrderByInput',
    {
        'related_todo_id': 'SortOrder',
    },
    total=True
)

_CoinTransaction_RelevanceInner = TypedDict(
    '_CoinTransaction_RelevanceInner',
    {
        'fields': 'List[CoinTransactionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_CoinTransaction_RelevanceOrderByInput = TypedDict(
    '_CoinTransaction_RelevanceOrderByInput',
    {
        '_relevance': '_CoinTransaction_RelevanceInner',
    },
    total=True
)

CoinTransactionOrderByInput = Union[
    '_CoinTransaction_transaction_id_OrderByInput',
    '_CoinTransaction_user_id_OrderByInput',
    '_CoinTransaction_amount_OrderByInput',
    '_CoinTransaction_transaction_type_OrderByInput',
    '_CoinTransaction_transaction_time_OrderByInput',
    '_CoinTransaction_related_todo_id_OrderByInput',
    '_CoinTransaction_RelevanceOrderByInput',
]



# recursive CoinTransaction types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CoinTransactionRelationFilter = TypedDict(
    'CoinTransactionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CoinTransactionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CoinTransactionInclude(TypedDict, total=False):
    """CoinTransaction relational arguments"""
    user: Union[bool, 'UserArgsFromCoinTransaction']
    related_todo: Union[bool, 'TodoArgsFromCoinTransaction']


    

class UserIncludeFromCoinTransaction(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    todos: Union[bool, 'FindManyTodoArgsFromCoinTransactionRecursive1']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromCoinTransactionRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromCoinTransactionRecursive1']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromCoinTransactionRecursive1']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromCoinTransactionRecursive1']


class UserIncludeFromCoinTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    todos: Union[bool, 'FindManyTodoArgsFromCoinTransactionRecursive2']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromCoinTransactionRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromCoinTransactionRecursive2']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromCoinTransactionRecursive2']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromCoinTransactionRecursive2']


class UserIncludeFromCoinTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    todos: Union[bool, 'FindManyTodoArgsFromCoinTransactionRecursive3']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromCoinTransactionRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromCoinTransactionRecursive3']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromCoinTransactionRecursive3']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromCoinTransactionRecursive3']


class UserIncludeFromCoinTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    todos: Union[bool, 'FindManyTodoArgsFromCoinTransactionRecursive4']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromCoinTransactionRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromCoinTransactionRecursive4']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromCoinTransactionRecursive4']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromCoinTransactionRecursive4']


class UserIncludeFromCoinTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""

    

class UserArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    
    

class FindManyUserArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class TodoCategoryIncludeFromCoinTransaction(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    todos: Union[bool, 'FindManyTodoArgsFromCoinTransactionRecursive1']
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive1']


class TodoCategoryIncludeFromCoinTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    todos: Union[bool, 'FindManyTodoArgsFromCoinTransactionRecursive2']
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive2']


class TodoCategoryIncludeFromCoinTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    todos: Union[bool, 'FindManyTodoArgsFromCoinTransactionRecursive3']
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive3']


class TodoCategoryIncludeFromCoinTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    todos: Union[bool, 'FindManyTodoArgsFromCoinTransactionRecursive4']
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive4']


class TodoCategoryIncludeFromCoinTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""

    

class TodoCategoryArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class TodoCategoryArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class TodoCategoryArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class TodoCategoryArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class TodoCategoryArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    
    

class FindManyTodoCategoryArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class FindManyTodoCategoryArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class FindManyTodoCategoryArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class FindManyTodoCategoryArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class FindManyTodoCategoryArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    
    

class TodoIncludeFromCoinTransaction(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive1']
    category: Union[bool, 'TodoCategoryArgsFromCoinTransactionRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromCoinTransactionRecursive1']


class TodoIncludeFromCoinTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive2']
    category: Union[bool, 'TodoCategoryArgsFromCoinTransactionRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromCoinTransactionRecursive2']


class TodoIncludeFromCoinTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive3']
    category: Union[bool, 'TodoCategoryArgsFromCoinTransactionRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromCoinTransactionRecursive3']


class TodoIncludeFromCoinTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive4']
    category: Union[bool, 'TodoCategoryArgsFromCoinTransactionRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromCoinTransactionRecursive4']


class TodoIncludeFromCoinTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""

    

class TodoArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'TodoIncludeFromTodoRecursive1'


class TodoArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'TodoIncludeFromTodoRecursive2'


class TodoArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'TodoIncludeFromTodoRecursive3'


class TodoArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'TodoIncludeFromTodoRecursive4'


class TodoArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    
    

class FindManyTodoArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive1'


class FindManyTodoArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive2'


class FindManyTodoArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive3'


class FindManyTodoArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive4'


class FindManyTodoArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    
    

class CoinTransactionIncludeFromCoinTransaction(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive1']
    related_todo: Union[bool, 'TodoArgsFromCoinTransactionRecursive1']


class CoinTransactionIncludeFromCoinTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive2']
    related_todo: Union[bool, 'TodoArgsFromCoinTransactionRecursive2']


class CoinTransactionIncludeFromCoinTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive3']
    related_todo: Union[bool, 'TodoArgsFromCoinTransactionRecursive3']


class CoinTransactionIncludeFromCoinTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive4']
    related_todo: Union[bool, 'TodoArgsFromCoinTransactionRecursive4']


class CoinTransactionIncludeFromCoinTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""

    

class CoinTransactionArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class CoinTransactionArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class CoinTransactionArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class CoinTransactionArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class CoinTransactionArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    
    

class FindManyCoinTransactionArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class FindManyCoinTransactionArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class FindManyCoinTransactionArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class FindManyCoinTransactionArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class FindManyCoinTransactionArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    
    

class RewardIncludeFromCoinTransaction(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromCoinTransactionRecursive1']


class RewardIncludeFromCoinTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromCoinTransactionRecursive2']


class RewardIncludeFromCoinTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromCoinTransactionRecursive3']


class RewardIncludeFromCoinTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromCoinTransactionRecursive4']


class RewardIncludeFromCoinTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""

    

class RewardArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'RewardIncludeFromRewardRecursive1'


class RewardArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'RewardIncludeFromRewardRecursive2'


class RewardArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'RewardIncludeFromRewardRecursive3'


class RewardArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'RewardIncludeFromRewardRecursive4'


class RewardArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    
    

class FindManyRewardArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive1'


class FindManyRewardArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive2'


class FindManyRewardArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive3'


class FindManyRewardArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive4'


class FindManyRewardArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    
    

class RewardRedemptionIncludeFromCoinTransaction(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive1']
    reward: Union[bool, 'RewardArgsFromCoinTransactionRecursive1']


class RewardRedemptionIncludeFromCoinTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive2']
    reward: Union[bool, 'RewardArgsFromCoinTransactionRecursive2']


class RewardRedemptionIncludeFromCoinTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive3']
    reward: Union[bool, 'RewardArgsFromCoinTransactionRecursive3']


class RewardRedemptionIncludeFromCoinTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive4']
    reward: Union[bool, 'RewardArgsFromCoinTransactionRecursive4']


class RewardRedemptionIncludeFromCoinTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""

    

class RewardRedemptionArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class RewardRedemptionArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class RewardRedemptionArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class RewardRedemptionArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class RewardRedemptionArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    
    

class FindManyRewardRedemptionArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class FindManyRewardRedemptionArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class FindManyRewardRedemptionArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class FindManyRewardRedemptionArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class FindManyRewardRedemptionArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    
    

class AchievementIncludeFromCoinTransaction(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromCoinTransactionRecursive1']


class AchievementIncludeFromCoinTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromCoinTransactionRecursive2']


class AchievementIncludeFromCoinTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromCoinTransactionRecursive3']


class AchievementIncludeFromCoinTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromCoinTransactionRecursive4']


class AchievementIncludeFromCoinTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""

    

class AchievementArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    
    

class FindManyAchievementArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromCoinTransaction(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive1']
    achievement: Union[bool, 'AchievementArgsFromCoinTransactionRecursive1']


class UserAchievementIncludeFromCoinTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive2']
    achievement: Union[bool, 'AchievementArgsFromCoinTransactionRecursive2']


class UserAchievementIncludeFromCoinTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive3']
    achievement: Union[bool, 'AchievementArgsFromCoinTransactionRecursive3']


class UserAchievementIncludeFromCoinTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""
    user: Union[bool, 'UserArgsFromCoinTransactionRecursive4']
    achievement: Union[bool, 'AchievementArgsFromCoinTransactionRecursive4']


class UserAchievementIncludeFromCoinTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for CoinTransaction"""

    

class UserAchievementArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    
    

class FindManyUserAchievementArgsFromCoinTransaction(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromCoinTransactionRecursive1(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromCoinTransactionRecursive2(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromCoinTransactionRecursive3(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromCoinTransactionRecursive4(TypedDict, total=False):
    """Arguments for CoinTransaction"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyCoinTransactionArgs = FindManyCoinTransactionArgsFromCoinTransaction
FindFirstCoinTransactionArgs = FindManyCoinTransactionArgsFromCoinTransaction


    

class CoinTransactionWhereInput(TypedDict, total=False):
    """CoinTransaction arguments for searching"""
    transaction_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    amount: Union[_int, 'types.IntFilter']
    transaction_type: 'enums.TransactionType'
    transaction_time: Union[datetime.datetime, 'types.DateTimeFilter']
    related_todo: 'TodoRelationFilter'
    related_todo_id: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['CoinTransactionWhereInputRecursive1', List['CoinTransactionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CoinTransactionWhereInputRecursive1']
    OR: List['CoinTransactionWhereInputRecursive1']
    NOT: List['CoinTransactionWhereInputRecursive1']


class CoinTransactionWhereInputRecursive1(TypedDict, total=False):
    """CoinTransaction arguments for searching"""
    transaction_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    amount: Union[_int, 'types.IntFilter']
    transaction_type: 'enums.TransactionType'
    transaction_time: Union[datetime.datetime, 'types.DateTimeFilter']
    related_todo: 'TodoRelationFilter'
    related_todo_id: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['CoinTransactionWhereInputRecursive2', List['CoinTransactionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CoinTransactionWhereInputRecursive2']
    OR: List['CoinTransactionWhereInputRecursive2']
    NOT: List['CoinTransactionWhereInputRecursive2']


class CoinTransactionWhereInputRecursive2(TypedDict, total=False):
    """CoinTransaction arguments for searching"""
    transaction_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    amount: Union[_int, 'types.IntFilter']
    transaction_type: 'enums.TransactionType'
    transaction_time: Union[datetime.datetime, 'types.DateTimeFilter']
    related_todo: 'TodoRelationFilter'
    related_todo_id: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['CoinTransactionWhereInputRecursive3', List['CoinTransactionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CoinTransactionWhereInputRecursive3']
    OR: List['CoinTransactionWhereInputRecursive3']
    NOT: List['CoinTransactionWhereInputRecursive3']


class CoinTransactionWhereInputRecursive3(TypedDict, total=False):
    """CoinTransaction arguments for searching"""
    transaction_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    amount: Union[_int, 'types.IntFilter']
    transaction_type: 'enums.TransactionType'
    transaction_time: Union[datetime.datetime, 'types.DateTimeFilter']
    related_todo: 'TodoRelationFilter'
    related_todo_id: Union[None, _int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['CoinTransactionWhereInputRecursive4', List['CoinTransactionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CoinTransactionWhereInputRecursive4']
    OR: List['CoinTransactionWhereInputRecursive4']
    NOT: List['CoinTransactionWhereInputRecursive4']


class CoinTransactionWhereInputRecursive4(TypedDict, total=False):
    """CoinTransaction arguments for searching"""
    transaction_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    amount: Union[_int, 'types.IntFilter']
    transaction_type: 'enums.TransactionType'
    transaction_time: Union[datetime.datetime, 'types.DateTimeFilter']
    related_todo: 'TodoRelationFilter'
    related_todo_id: Union[None, _int, 'types.IntFilter']



# aggregate CoinTransaction types


    

class CoinTransactionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """CoinTransaction arguments for searching"""
    transaction_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    transaction_type: 'enums.TransactionType'
    transaction_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    related_todo_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CoinTransactionScalarWhereWithAggregatesInputRecursive1']
    OR: List['CoinTransactionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CoinTransactionScalarWhereWithAggregatesInputRecursive1']


class CoinTransactionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """CoinTransaction arguments for searching"""
    transaction_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    transaction_type: 'enums.TransactionType'
    transaction_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    related_todo_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CoinTransactionScalarWhereWithAggregatesInputRecursive2']
    OR: List['CoinTransactionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CoinTransactionScalarWhereWithAggregatesInputRecursive2']


class CoinTransactionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """CoinTransaction arguments for searching"""
    transaction_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    transaction_type: 'enums.TransactionType'
    transaction_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    related_todo_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CoinTransactionScalarWhereWithAggregatesInputRecursive3']
    OR: List['CoinTransactionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CoinTransactionScalarWhereWithAggregatesInputRecursive3']


class CoinTransactionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """CoinTransaction arguments for searching"""
    transaction_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    transaction_type: 'enums.TransactionType'
    transaction_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    related_todo_id: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CoinTransactionScalarWhereWithAggregatesInputRecursive4']
    OR: List['CoinTransactionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CoinTransactionScalarWhereWithAggregatesInputRecursive4']


class CoinTransactionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """CoinTransaction arguments for searching"""
    transaction_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    transaction_type: 'enums.TransactionType'
    transaction_time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    related_todo_id: Union[_int, 'types.IntWithAggregatesFilter']



class CoinTransactionGroupByOutput(TypedDict, total=False):
    transaction_id: _int
    user_id: _int
    amount: _int
    transaction_type: 'enums.TransactionType'
    transaction_time: datetime.datetime
    related_todo_id: _int
    _sum: 'CoinTransactionSumAggregateOutput'
    _avg: 'CoinTransactionAvgAggregateOutput'
    _min: 'CoinTransactionMinAggregateOutput'
    _max: 'CoinTransactionMaxAggregateOutput'
    _count: 'CoinTransactionCountAggregateOutput'


class CoinTransactionAvgAggregateOutput(TypedDict, total=False):
    """CoinTransaction output for aggregating averages"""
    transaction_id: float
    user_id: float
    amount: float
    related_todo_id: float


class CoinTransactionSumAggregateOutput(TypedDict, total=False):
    """CoinTransaction output for aggregating sums"""
    transaction_id: _int
    user_id: _int
    amount: _int
    related_todo_id: _int


class CoinTransactionScalarAggregateOutput(TypedDict, total=False):
    """CoinTransaction output including scalar fields"""
    transaction_id: _int
    user_id: _int
    amount: _int
    transaction_type: 'enums.TransactionType'
    transaction_time: datetime.datetime
    related_todo_id: _int


CoinTransactionMinAggregateOutput = CoinTransactionScalarAggregateOutput
CoinTransactionMaxAggregateOutput = CoinTransactionScalarAggregateOutput


class CoinTransactionMaxAggregateInput(TypedDict, total=False):
    """CoinTransaction input for aggregating by max"""
    transaction_id: bool
    user_id: bool
    amount: bool
    transaction_type: bool
    transaction_time: bool
    related_todo_id: bool


class CoinTransactionMinAggregateInput(TypedDict, total=False):
    """CoinTransaction input for aggregating by min"""
    transaction_id: bool
    user_id: bool
    amount: bool
    transaction_type: bool
    transaction_time: bool
    related_todo_id: bool


class CoinTransactionNumberAggregateInput(TypedDict, total=False):
    """CoinTransaction input for aggregating numbers"""
    transaction_id: bool
    user_id: bool
    amount: bool
    related_todo_id: bool


CoinTransactionAvgAggregateInput = CoinTransactionNumberAggregateInput
CoinTransactionSumAggregateInput = CoinTransactionNumberAggregateInput


CoinTransactionCountAggregateInput = TypedDict(
    'CoinTransactionCountAggregateInput',
    {
        'transaction_id': bool,
        'user_id': bool,
        'amount': bool,
        'transaction_type': bool,
        'transaction_time': bool,
        'related_todo_id': bool,
        '_all': bool,
    },
    total=False,
)

CoinTransactionCountAggregateOutput = TypedDict(
    'CoinTransactionCountAggregateOutput',
    {
        'transaction_id': int,
        'user_id': int,
        'amount': int,
        'transaction_type': int,
        'transaction_time': int,
        'related_todo_id': int,
        '_all': int,
    },
    total=False,
)


CoinTransactionKeys = Literal[
    'transaction_id',
    'user',
    'user_id',
    'amount',
    'transaction_type',
    'transaction_time',
    'related_todo',
    'related_todo_id',
]
CoinTransactionScalarFieldKeys = Literal[
    'transaction_id',
    'user_id',
    'amount',
    'transaction_type',
    'transaction_time',
    'related_todo_id',
]
CoinTransactionScalarFieldKeysT = TypeVar('CoinTransactionScalarFieldKeysT', bound=CoinTransactionScalarFieldKeys)

CoinTransactionRelationalFieldKeys = Literal[
        'user',
        'related_todo',
    ]

# Reward types

class RewardOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Reward create method"""
    reward_id: _int
    description: Optional[_str]
    is_repeatable: _bool
    reward_redemptions: 'RewardRedemptionCreateManyNestedWithoutRelationsInput'


class RewardCreateInput(RewardOptionalCreateInput):
    """Required arguments to the Reward create method"""
    reward_name: _str
    coin_cost: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RewardOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Reward create method, without relations"""
    reward_id: _int
    description: Optional[_str]
    is_repeatable: _bool


class RewardCreateWithoutRelationsInput(RewardOptionalCreateWithoutRelationsInput):
    """Required arguments to the Reward create method, without relations"""
    reward_name: _str
    coin_cost: _int

class RewardConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'RewardCreateWithoutRelationsInput'
    where: 'RewardWhereUniqueInput'

class RewardCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RewardCreateWithoutRelationsInput'
    connect: 'RewardWhereUniqueInput'
    connect_or_create: 'RewardConnectOrCreateWithoutRelationsInput'


class RewardCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RewardCreateWithoutRelationsInput', List['RewardCreateWithoutRelationsInput']]
    connect: Union['RewardWhereUniqueInput', List['RewardWhereUniqueInput']]
    connect_or_create: Union['RewardConnectOrCreateWithoutRelationsInput', List['RewardConnectOrCreateWithoutRelationsInput']]

_RewardWhereUnique_reward_id_Input = TypedDict(
    '_RewardWhereUnique_reward_id_Input',
    {
        'reward_id': '_int',
    },
    total=True
)

RewardWhereUniqueInput = _RewardWhereUnique_reward_id_Input


class RewardUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    reward_id: Union[AtomicIntInput, _int]
    reward_name: _str
    description: Optional[_str]
    coin_cost: Union[AtomicIntInput, _int]
    is_repeatable: _bool
    reward_redemptions: 'RewardRedemptionUpdateManyWithoutRelationsInput'


class RewardUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    reward_id: Union[AtomicIntInput, _int]
    reward_name: _str
    description: Optional[_str]
    coin_cost: Union[AtomicIntInput, _int]
    is_repeatable: _bool


class RewardUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RewardCreateWithoutRelationsInput']
    connect: List['RewardWhereUniqueInput']
    connect_or_create: List['RewardConnectOrCreateWithoutRelationsInput']
    set: List['RewardWhereUniqueInput']
    disconnect: List['RewardWhereUniqueInput']
    delete: List['RewardWhereUniqueInput']

    # TODO
    # update: List['RewardUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RewardUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RewardScalarWhereInput']
    # upsert: List['RewardUpserteWithWhereUniqueWithoutRelationsInput']


class RewardUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RewardCreateWithoutRelationsInput'
    connect: 'RewardWhereUniqueInput'
    connect_or_create: 'RewardConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RewardUpdateInput'
    # upsert: 'RewardUpsertWithoutRelationsInput'


class RewardUpsertInput(TypedDict):
    create: 'RewardCreateInput'
    update: 'RewardUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Reward_reward_id_OrderByInput = TypedDict(
    '_Reward_reward_id_OrderByInput',
    {
        'reward_id': 'SortOrder',
    },
    total=True
)

_Reward_reward_name_OrderByInput = TypedDict(
    '_Reward_reward_name_OrderByInput',
    {
        'reward_name': 'SortOrder',
    },
    total=True
)

_Reward_description_OrderByInput = TypedDict(
    '_Reward_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Reward_coin_cost_OrderByInput = TypedDict(
    '_Reward_coin_cost_OrderByInput',
    {
        'coin_cost': 'SortOrder',
    },
    total=True
)

_Reward_is_repeatable_OrderByInput = TypedDict(
    '_Reward_is_repeatable_OrderByInput',
    {
        'is_repeatable': 'SortOrder',
    },
    total=True
)

_Reward_RelevanceInner = TypedDict(
    '_Reward_RelevanceInner',
    {
        'fields': 'List[RewardScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Reward_RelevanceOrderByInput = TypedDict(
    '_Reward_RelevanceOrderByInput',
    {
        '_relevance': '_Reward_RelevanceInner',
    },
    total=True
)

RewardOrderByInput = Union[
    '_Reward_reward_id_OrderByInput',
    '_Reward_reward_name_OrderByInput',
    '_Reward_description_OrderByInput',
    '_Reward_coin_cost_OrderByInput',
    '_Reward_is_repeatable_OrderByInput',
    '_Reward_RelevanceOrderByInput',
]



# recursive Reward types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

RewardRelationFilter = TypedDict(
    'RewardRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class RewardListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class RewardInclude(TypedDict, total=False):
    """Reward relational arguments"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromReward']


    

class UserIncludeFromReward(TypedDict, total=False):
    """Relational arguments for Reward"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRecursive1']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromRewardRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRecursive1']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRecursive1']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRecursive1']


class UserIncludeFromRewardRecursive1(TypedDict, total=False):
    """Relational arguments for Reward"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRecursive2']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromRewardRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRecursive2']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRecursive2']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRecursive2']


class UserIncludeFromRewardRecursive2(TypedDict, total=False):
    """Relational arguments for Reward"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRecursive3']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromRewardRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRecursive3']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRecursive3']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRecursive3']


class UserIncludeFromRewardRecursive3(TypedDict, total=False):
    """Relational arguments for Reward"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRecursive4']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromRewardRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRecursive4']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRecursive4']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRecursive4']


class UserIncludeFromRewardRecursive4(TypedDict, total=False):
    """Relational arguments for Reward"""

    

class UserArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    
    

class FindManyUserArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class TodoCategoryIncludeFromReward(TypedDict, total=False):
    """Relational arguments for Reward"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRecursive1']
    user: Union[bool, 'UserArgsFromRewardRecursive1']


class TodoCategoryIncludeFromRewardRecursive1(TypedDict, total=False):
    """Relational arguments for Reward"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRecursive2']
    user: Union[bool, 'UserArgsFromRewardRecursive2']


class TodoCategoryIncludeFromRewardRecursive2(TypedDict, total=False):
    """Relational arguments for Reward"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRecursive3']
    user: Union[bool, 'UserArgsFromRewardRecursive3']


class TodoCategoryIncludeFromRewardRecursive3(TypedDict, total=False):
    """Relational arguments for Reward"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRecursive4']
    user: Union[bool, 'UserArgsFromRewardRecursive4']


class TodoCategoryIncludeFromRewardRecursive4(TypedDict, total=False):
    """Relational arguments for Reward"""

    

class TodoCategoryArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class TodoCategoryArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class TodoCategoryArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class TodoCategoryArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class TodoCategoryArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    
    

class FindManyTodoCategoryArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class FindManyTodoCategoryArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class FindManyTodoCategoryArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class FindManyTodoCategoryArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class FindManyTodoCategoryArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    
    

class TodoIncludeFromReward(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive1']
    category: Union[bool, 'TodoCategoryArgsFromRewardRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRecursive1']


class TodoIncludeFromRewardRecursive1(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive2']
    category: Union[bool, 'TodoCategoryArgsFromRewardRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRecursive2']


class TodoIncludeFromRewardRecursive2(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive3']
    category: Union[bool, 'TodoCategoryArgsFromRewardRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRecursive3']


class TodoIncludeFromRewardRecursive3(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive4']
    category: Union[bool, 'TodoCategoryArgsFromRewardRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRecursive4']


class TodoIncludeFromRewardRecursive4(TypedDict, total=False):
    """Relational arguments for Reward"""

    

class TodoArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'TodoIncludeFromTodoRecursive1'


class TodoArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'TodoIncludeFromTodoRecursive2'


class TodoArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'TodoIncludeFromTodoRecursive3'


class TodoArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'TodoIncludeFromTodoRecursive4'


class TodoArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    
    

class FindManyTodoArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive1'


class FindManyTodoArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive2'


class FindManyTodoArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive3'


class FindManyTodoArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive4'


class FindManyTodoArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    
    

class CoinTransactionIncludeFromReward(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive1']
    related_todo: Union[bool, 'TodoArgsFromRewardRecursive1']


class CoinTransactionIncludeFromRewardRecursive1(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive2']
    related_todo: Union[bool, 'TodoArgsFromRewardRecursive2']


class CoinTransactionIncludeFromRewardRecursive2(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive3']
    related_todo: Union[bool, 'TodoArgsFromRewardRecursive3']


class CoinTransactionIncludeFromRewardRecursive3(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive4']
    related_todo: Union[bool, 'TodoArgsFromRewardRecursive4']


class CoinTransactionIncludeFromRewardRecursive4(TypedDict, total=False):
    """Relational arguments for Reward"""

    

class CoinTransactionArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class CoinTransactionArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class CoinTransactionArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class CoinTransactionArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class CoinTransactionArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    
    

class FindManyCoinTransactionArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class FindManyCoinTransactionArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class FindManyCoinTransactionArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class FindManyCoinTransactionArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class FindManyCoinTransactionArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    
    

class RewardIncludeFromReward(TypedDict, total=False):
    """Relational arguments for Reward"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRecursive1']


class RewardIncludeFromRewardRecursive1(TypedDict, total=False):
    """Relational arguments for Reward"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRecursive2']


class RewardIncludeFromRewardRecursive2(TypedDict, total=False):
    """Relational arguments for Reward"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRecursive3']


class RewardIncludeFromRewardRecursive3(TypedDict, total=False):
    """Relational arguments for Reward"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRecursive4']


class RewardIncludeFromRewardRecursive4(TypedDict, total=False):
    """Relational arguments for Reward"""

    

class RewardArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'RewardIncludeFromRewardRecursive1'


class RewardArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'RewardIncludeFromRewardRecursive2'


class RewardArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'RewardIncludeFromRewardRecursive3'


class RewardArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'RewardIncludeFromRewardRecursive4'


class RewardArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    
    

class FindManyRewardArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive1'


class FindManyRewardArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive2'


class FindManyRewardArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive3'


class FindManyRewardArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive4'


class FindManyRewardArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    
    

class RewardRedemptionIncludeFromReward(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive1']
    reward: Union[bool, 'RewardArgsFromRewardRecursive1']


class RewardRedemptionIncludeFromRewardRecursive1(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive2']
    reward: Union[bool, 'RewardArgsFromRewardRecursive2']


class RewardRedemptionIncludeFromRewardRecursive2(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive3']
    reward: Union[bool, 'RewardArgsFromRewardRecursive3']


class RewardRedemptionIncludeFromRewardRecursive3(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive4']
    reward: Union[bool, 'RewardArgsFromRewardRecursive4']


class RewardRedemptionIncludeFromRewardRecursive4(TypedDict, total=False):
    """Relational arguments for Reward"""

    

class RewardRedemptionArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class RewardRedemptionArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class RewardRedemptionArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class RewardRedemptionArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class RewardRedemptionArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    
    

class FindManyRewardRedemptionArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class FindManyRewardRedemptionArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class FindManyRewardRedemptionArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class FindManyRewardRedemptionArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class FindManyRewardRedemptionArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    
    

class AchievementIncludeFromReward(TypedDict, total=False):
    """Relational arguments for Reward"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRecursive1']


class AchievementIncludeFromRewardRecursive1(TypedDict, total=False):
    """Relational arguments for Reward"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRecursive2']


class AchievementIncludeFromRewardRecursive2(TypedDict, total=False):
    """Relational arguments for Reward"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRecursive3']


class AchievementIncludeFromRewardRecursive3(TypedDict, total=False):
    """Relational arguments for Reward"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRecursive4']


class AchievementIncludeFromRewardRecursive4(TypedDict, total=False):
    """Relational arguments for Reward"""

    

class AchievementArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    
    

class FindManyAchievementArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromReward(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive1']
    achievement: Union[bool, 'AchievementArgsFromRewardRecursive1']


class UserAchievementIncludeFromRewardRecursive1(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive2']
    achievement: Union[bool, 'AchievementArgsFromRewardRecursive2']


class UserAchievementIncludeFromRewardRecursive2(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive3']
    achievement: Union[bool, 'AchievementArgsFromRewardRecursive3']


class UserAchievementIncludeFromRewardRecursive3(TypedDict, total=False):
    """Relational arguments for Reward"""
    user: Union[bool, 'UserArgsFromRewardRecursive4']
    achievement: Union[bool, 'AchievementArgsFromRewardRecursive4']


class UserAchievementIncludeFromRewardRecursive4(TypedDict, total=False):
    """Relational arguments for Reward"""

    

class UserAchievementArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    
    

class FindManyUserAchievementArgsFromReward(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromRewardRecursive1(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromRewardRecursive2(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromRewardRecursive3(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromRewardRecursive4(TypedDict, total=False):
    """Arguments for Reward"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyRewardArgs = FindManyRewardArgsFromReward
FindFirstRewardArgs = FindManyRewardArgsFromReward


    

class RewardWhereInput(TypedDict, total=False):
    """Reward arguments for searching"""
    reward_id: Union[_int, 'types.IntFilter']
    reward_name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    coin_cost: Union[_int, 'types.IntFilter']
    is_repeatable: Union[_bool, 'types.BooleanFilter']
    reward_redemptions: 'RewardRedemptionListRelationFilter'

    # should be noted that AND and NOT should be Union['RewardWhereInputRecursive1', List['RewardWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['RewardWhereInputRecursive1']
    OR: List['RewardWhereInputRecursive1']
    NOT: List['RewardWhereInputRecursive1']


class RewardWhereInputRecursive1(TypedDict, total=False):
    """Reward arguments for searching"""
    reward_id: Union[_int, 'types.IntFilter']
    reward_name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    coin_cost: Union[_int, 'types.IntFilter']
    is_repeatable: Union[_bool, 'types.BooleanFilter']
    reward_redemptions: 'RewardRedemptionListRelationFilter'

    # should be noted that AND and NOT should be Union['RewardWhereInputRecursive2', List['RewardWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['RewardWhereInputRecursive2']
    OR: List['RewardWhereInputRecursive2']
    NOT: List['RewardWhereInputRecursive2']


class RewardWhereInputRecursive2(TypedDict, total=False):
    """Reward arguments for searching"""
    reward_id: Union[_int, 'types.IntFilter']
    reward_name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    coin_cost: Union[_int, 'types.IntFilter']
    is_repeatable: Union[_bool, 'types.BooleanFilter']
    reward_redemptions: 'RewardRedemptionListRelationFilter'

    # should be noted that AND and NOT should be Union['RewardWhereInputRecursive3', List['RewardWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['RewardWhereInputRecursive3']
    OR: List['RewardWhereInputRecursive3']
    NOT: List['RewardWhereInputRecursive3']


class RewardWhereInputRecursive3(TypedDict, total=False):
    """Reward arguments for searching"""
    reward_id: Union[_int, 'types.IntFilter']
    reward_name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    coin_cost: Union[_int, 'types.IntFilter']
    is_repeatable: Union[_bool, 'types.BooleanFilter']
    reward_redemptions: 'RewardRedemptionListRelationFilter'

    # should be noted that AND and NOT should be Union['RewardWhereInputRecursive4', List['RewardWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['RewardWhereInputRecursive4']
    OR: List['RewardWhereInputRecursive4']
    NOT: List['RewardWhereInputRecursive4']


class RewardWhereInputRecursive4(TypedDict, total=False):
    """Reward arguments for searching"""
    reward_id: Union[_int, 'types.IntFilter']
    reward_name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    coin_cost: Union[_int, 'types.IntFilter']
    is_repeatable: Union[_bool, 'types.BooleanFilter']
    reward_redemptions: 'RewardRedemptionListRelationFilter'



# aggregate Reward types


    

class RewardScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Reward arguments for searching"""
    reward_id: Union[_int, 'types.IntWithAggregatesFilter']
    reward_name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coin_cost: Union[_int, 'types.IntWithAggregatesFilter']
    is_repeatable: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['RewardScalarWhereWithAggregatesInputRecursive1']
    OR: List['RewardScalarWhereWithAggregatesInputRecursive1']
    NOT: List['RewardScalarWhereWithAggregatesInputRecursive1']


class RewardScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Reward arguments for searching"""
    reward_id: Union[_int, 'types.IntWithAggregatesFilter']
    reward_name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coin_cost: Union[_int, 'types.IntWithAggregatesFilter']
    is_repeatable: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['RewardScalarWhereWithAggregatesInputRecursive2']
    OR: List['RewardScalarWhereWithAggregatesInputRecursive2']
    NOT: List['RewardScalarWhereWithAggregatesInputRecursive2']


class RewardScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Reward arguments for searching"""
    reward_id: Union[_int, 'types.IntWithAggregatesFilter']
    reward_name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coin_cost: Union[_int, 'types.IntWithAggregatesFilter']
    is_repeatable: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['RewardScalarWhereWithAggregatesInputRecursive3']
    OR: List['RewardScalarWhereWithAggregatesInputRecursive3']
    NOT: List['RewardScalarWhereWithAggregatesInputRecursive3']


class RewardScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Reward arguments for searching"""
    reward_id: Union[_int, 'types.IntWithAggregatesFilter']
    reward_name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coin_cost: Union[_int, 'types.IntWithAggregatesFilter']
    is_repeatable: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['RewardScalarWhereWithAggregatesInputRecursive4']
    OR: List['RewardScalarWhereWithAggregatesInputRecursive4']
    NOT: List['RewardScalarWhereWithAggregatesInputRecursive4']


class RewardScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Reward arguments for searching"""
    reward_id: Union[_int, 'types.IntWithAggregatesFilter']
    reward_name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coin_cost: Union[_int, 'types.IntWithAggregatesFilter']
    is_repeatable: Union[_bool, 'types.BooleanWithAggregatesFilter']



class RewardGroupByOutput(TypedDict, total=False):
    reward_id: _int
    reward_name: _str
    description: _str
    coin_cost: _int
    is_repeatable: _bool
    _sum: 'RewardSumAggregateOutput'
    _avg: 'RewardAvgAggregateOutput'
    _min: 'RewardMinAggregateOutput'
    _max: 'RewardMaxAggregateOutput'
    _count: 'RewardCountAggregateOutput'


class RewardAvgAggregateOutput(TypedDict, total=False):
    """Reward output for aggregating averages"""
    reward_id: float
    coin_cost: float


class RewardSumAggregateOutput(TypedDict, total=False):
    """Reward output for aggregating sums"""
    reward_id: _int
    coin_cost: _int


class RewardScalarAggregateOutput(TypedDict, total=False):
    """Reward output including scalar fields"""
    reward_id: _int
    reward_name: _str
    description: _str
    coin_cost: _int
    is_repeatable: _bool


RewardMinAggregateOutput = RewardScalarAggregateOutput
RewardMaxAggregateOutput = RewardScalarAggregateOutput


class RewardMaxAggregateInput(TypedDict, total=False):
    """Reward input for aggregating by max"""
    reward_id: bool
    reward_name: bool
    description: bool
    coin_cost: bool
    is_repeatable: bool


class RewardMinAggregateInput(TypedDict, total=False):
    """Reward input for aggregating by min"""
    reward_id: bool
    reward_name: bool
    description: bool
    coin_cost: bool
    is_repeatable: bool


class RewardNumberAggregateInput(TypedDict, total=False):
    """Reward input for aggregating numbers"""
    reward_id: bool
    coin_cost: bool


RewardAvgAggregateInput = RewardNumberAggregateInput
RewardSumAggregateInput = RewardNumberAggregateInput


RewardCountAggregateInput = TypedDict(
    'RewardCountAggregateInput',
    {
        'reward_id': bool,
        'reward_name': bool,
        'description': bool,
        'coin_cost': bool,
        'is_repeatable': bool,
        '_all': bool,
    },
    total=False,
)

RewardCountAggregateOutput = TypedDict(
    'RewardCountAggregateOutput',
    {
        'reward_id': int,
        'reward_name': int,
        'description': int,
        'coin_cost': int,
        'is_repeatable': int,
        '_all': int,
    },
    total=False,
)


RewardKeys = Literal[
    'reward_id',
    'reward_name',
    'description',
    'coin_cost',
    'is_repeatable',
    'reward_redemptions',
]
RewardScalarFieldKeys = Literal[
    'reward_id',
    'reward_name',
    'description',
    'coin_cost',
    'is_repeatable',
]
RewardScalarFieldKeysT = TypeVar('RewardScalarFieldKeysT', bound=RewardScalarFieldKeys)

RewardRelationalFieldKeys = Literal[
        'reward_redemptions',
    ]

# RewardRedemption types

class RewardRedemptionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the RewardRedemption create method"""
    redemption_id: _int
    user: 'UserCreateNestedWithoutRelationsInput'
    user_id: _int
    reward: 'RewardCreateNestedWithoutRelationsInput'
    reward_id: _int
    redemption_date: datetime.datetime


class RewardRedemptionCreateInput(RewardRedemptionOptionalCreateInput):
    """Required arguments to the RewardRedemption create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RewardRedemptionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the RewardRedemption create method, without relations"""
    redemption_id: _int
    user_id: _int
    reward_id: _int
    redemption_date: datetime.datetime


class RewardRedemptionCreateWithoutRelationsInput(RewardRedemptionOptionalCreateWithoutRelationsInput):
    """Required arguments to the RewardRedemption create method, without relations"""

class RewardRedemptionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'RewardRedemptionCreateWithoutRelationsInput'
    where: 'RewardRedemptionWhereUniqueInput'

class RewardRedemptionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RewardRedemptionCreateWithoutRelationsInput'
    connect: 'RewardRedemptionWhereUniqueInput'
    connect_or_create: 'RewardRedemptionConnectOrCreateWithoutRelationsInput'


class RewardRedemptionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RewardRedemptionCreateWithoutRelationsInput', List['RewardRedemptionCreateWithoutRelationsInput']]
    connect: Union['RewardRedemptionWhereUniqueInput', List['RewardRedemptionWhereUniqueInput']]
    connect_or_create: Union['RewardRedemptionConnectOrCreateWithoutRelationsInput', List['RewardRedemptionConnectOrCreateWithoutRelationsInput']]

_RewardRedemptionWhereUnique_redemption_id_Input = TypedDict(
    '_RewardRedemptionWhereUnique_redemption_id_Input',
    {
        'redemption_id': '_int',
    },
    total=True
)

RewardRedemptionWhereUniqueInput = _RewardRedemptionWhereUnique_redemption_id_Input


class RewardRedemptionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    redemption_id: Union[AtomicIntInput, _int]
    user: 'UserUpdateOneWithoutRelationsInput'
    reward: 'RewardUpdateOneWithoutRelationsInput'
    redemption_date: datetime.datetime


class RewardRedemptionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    redemption_id: Union[AtomicIntInput, _int]
    redemption_date: datetime.datetime


class RewardRedemptionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RewardRedemptionCreateWithoutRelationsInput']
    connect: List['RewardRedemptionWhereUniqueInput']
    connect_or_create: List['RewardRedemptionConnectOrCreateWithoutRelationsInput']
    set: List['RewardRedemptionWhereUniqueInput']
    disconnect: List['RewardRedemptionWhereUniqueInput']
    delete: List['RewardRedemptionWhereUniqueInput']

    # TODO
    # update: List['RewardRedemptionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RewardRedemptionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RewardRedemptionScalarWhereInput']
    # upsert: List['RewardRedemptionUpserteWithWhereUniqueWithoutRelationsInput']


class RewardRedemptionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RewardRedemptionCreateWithoutRelationsInput'
    connect: 'RewardRedemptionWhereUniqueInput'
    connect_or_create: 'RewardRedemptionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RewardRedemptionUpdateInput'
    # upsert: 'RewardRedemptionUpsertWithoutRelationsInput'


class RewardRedemptionUpsertInput(TypedDict):
    create: 'RewardRedemptionCreateInput'
    update: 'RewardRedemptionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_RewardRedemption_redemption_id_OrderByInput = TypedDict(
    '_RewardRedemption_redemption_id_OrderByInput',
    {
        'redemption_id': 'SortOrder',
    },
    total=True
)

_RewardRedemption_user_id_OrderByInput = TypedDict(
    '_RewardRedemption_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_RewardRedemption_reward_id_OrderByInput = TypedDict(
    '_RewardRedemption_reward_id_OrderByInput',
    {
        'reward_id': 'SortOrder',
    },
    total=True
)

_RewardRedemption_redemption_date_OrderByInput = TypedDict(
    '_RewardRedemption_redemption_date_OrderByInput',
    {
        'redemption_date': 'SortOrder',
    },
    total=True
)

_RewardRedemption_RelevanceInner = TypedDict(
    '_RewardRedemption_RelevanceInner',
    {
        'fields': 'List[RewardRedemptionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_RewardRedemption_RelevanceOrderByInput = TypedDict(
    '_RewardRedemption_RelevanceOrderByInput',
    {
        '_relevance': '_RewardRedemption_RelevanceInner',
    },
    total=True
)

RewardRedemptionOrderByInput = Union[
    '_RewardRedemption_redemption_id_OrderByInput',
    '_RewardRedemption_user_id_OrderByInput',
    '_RewardRedemption_reward_id_OrderByInput',
    '_RewardRedemption_redemption_date_OrderByInput',
    '_RewardRedemption_RelevanceOrderByInput',
]



# recursive RewardRedemption types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

RewardRedemptionRelationFilter = TypedDict(
    'RewardRedemptionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class RewardRedemptionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class RewardRedemptionInclude(TypedDict, total=False):
    """RewardRedemption relational arguments"""
    user: Union[bool, 'UserArgsFromRewardRedemption']
    reward: Union[bool, 'RewardArgsFromRewardRedemption']


    

class UserIncludeFromRewardRedemption(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRedemptionRecursive1']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromRewardRedemptionRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRedemptionRecursive1']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRedemptionRecursive1']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRedemptionRecursive1']


class UserIncludeFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRedemptionRecursive2']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromRewardRedemptionRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRedemptionRecursive2']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRedemptionRecursive2']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRedemptionRecursive2']


class UserIncludeFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRedemptionRecursive3']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromRewardRedemptionRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRedemptionRecursive3']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRedemptionRecursive3']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRedemptionRecursive3']


class UserIncludeFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRedemptionRecursive4']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromRewardRedemptionRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRedemptionRecursive4']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRedemptionRecursive4']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRedemptionRecursive4']


class UserIncludeFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""

    

class UserArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    
    

class FindManyUserArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class TodoCategoryIncludeFromRewardRedemption(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRedemptionRecursive1']
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive1']


class TodoCategoryIncludeFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRedemptionRecursive2']
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive2']


class TodoCategoryIncludeFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRedemptionRecursive3']
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive3']


class TodoCategoryIncludeFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    todos: Union[bool, 'FindManyTodoArgsFromRewardRedemptionRecursive4']
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive4']


class TodoCategoryIncludeFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""

    

class TodoCategoryArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class TodoCategoryArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class TodoCategoryArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class TodoCategoryArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class TodoCategoryArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    
    

class FindManyTodoCategoryArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class FindManyTodoCategoryArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class FindManyTodoCategoryArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class FindManyTodoCategoryArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class FindManyTodoCategoryArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    
    

class TodoIncludeFromRewardRedemption(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive1']
    category: Union[bool, 'TodoCategoryArgsFromRewardRedemptionRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRedemptionRecursive1']


class TodoIncludeFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive2']
    category: Union[bool, 'TodoCategoryArgsFromRewardRedemptionRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRedemptionRecursive2']


class TodoIncludeFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive3']
    category: Union[bool, 'TodoCategoryArgsFromRewardRedemptionRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRedemptionRecursive3']


class TodoIncludeFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive4']
    category: Union[bool, 'TodoCategoryArgsFromRewardRedemptionRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromRewardRedemptionRecursive4']


class TodoIncludeFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""

    

class TodoArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'TodoIncludeFromTodoRecursive1'


class TodoArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'TodoIncludeFromTodoRecursive2'


class TodoArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'TodoIncludeFromTodoRecursive3'


class TodoArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'TodoIncludeFromTodoRecursive4'


class TodoArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    
    

class FindManyTodoArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive1'


class FindManyTodoArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive2'


class FindManyTodoArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive3'


class FindManyTodoArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive4'


class FindManyTodoArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    
    

class CoinTransactionIncludeFromRewardRedemption(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive1']
    related_todo: Union[bool, 'TodoArgsFromRewardRedemptionRecursive1']


class CoinTransactionIncludeFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive2']
    related_todo: Union[bool, 'TodoArgsFromRewardRedemptionRecursive2']


class CoinTransactionIncludeFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive3']
    related_todo: Union[bool, 'TodoArgsFromRewardRedemptionRecursive3']


class CoinTransactionIncludeFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive4']
    related_todo: Union[bool, 'TodoArgsFromRewardRedemptionRecursive4']


class CoinTransactionIncludeFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""

    

class CoinTransactionArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class CoinTransactionArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class CoinTransactionArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class CoinTransactionArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class CoinTransactionArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    
    

class FindManyCoinTransactionArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class FindManyCoinTransactionArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class FindManyCoinTransactionArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class FindManyCoinTransactionArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class FindManyCoinTransactionArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    
    

class RewardIncludeFromRewardRedemption(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRedemptionRecursive1']


class RewardIncludeFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRedemptionRecursive2']


class RewardIncludeFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRedemptionRecursive3']


class RewardIncludeFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromRewardRedemptionRecursive4']


class RewardIncludeFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""

    

class RewardArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'RewardIncludeFromRewardRecursive1'


class RewardArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'RewardIncludeFromRewardRecursive2'


class RewardArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'RewardIncludeFromRewardRecursive3'


class RewardArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'RewardIncludeFromRewardRecursive4'


class RewardArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    
    

class FindManyRewardArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive1'


class FindManyRewardArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive2'


class FindManyRewardArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive3'


class FindManyRewardArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive4'


class FindManyRewardArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    
    

class RewardRedemptionIncludeFromRewardRedemption(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive1']
    reward: Union[bool, 'RewardArgsFromRewardRedemptionRecursive1']


class RewardRedemptionIncludeFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive2']
    reward: Union[bool, 'RewardArgsFromRewardRedemptionRecursive2']


class RewardRedemptionIncludeFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive3']
    reward: Union[bool, 'RewardArgsFromRewardRedemptionRecursive3']


class RewardRedemptionIncludeFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive4']
    reward: Union[bool, 'RewardArgsFromRewardRedemptionRecursive4']


class RewardRedemptionIncludeFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""

    

class RewardRedemptionArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class RewardRedemptionArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class RewardRedemptionArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class RewardRedemptionArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class RewardRedemptionArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    
    

class FindManyRewardRedemptionArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class FindManyRewardRedemptionArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class FindManyRewardRedemptionArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class FindManyRewardRedemptionArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class FindManyRewardRedemptionArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    
    

class AchievementIncludeFromRewardRedemption(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRedemptionRecursive1']


class AchievementIncludeFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRedemptionRecursive2']


class AchievementIncludeFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRedemptionRecursive3']


class AchievementIncludeFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromRewardRedemptionRecursive4']


class AchievementIncludeFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""

    

class AchievementArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    
    

class FindManyAchievementArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromRewardRedemption(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive1']
    achievement: Union[bool, 'AchievementArgsFromRewardRedemptionRecursive1']


class UserAchievementIncludeFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive2']
    achievement: Union[bool, 'AchievementArgsFromRewardRedemptionRecursive2']


class UserAchievementIncludeFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive3']
    achievement: Union[bool, 'AchievementArgsFromRewardRedemptionRecursive3']


class UserAchievementIncludeFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""
    user: Union[bool, 'UserArgsFromRewardRedemptionRecursive4']
    achievement: Union[bool, 'AchievementArgsFromRewardRedemptionRecursive4']


class UserAchievementIncludeFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Relational arguments for RewardRedemption"""

    

class UserAchievementArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    
    

class FindManyUserAchievementArgsFromRewardRedemption(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromRewardRedemptionRecursive1(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromRewardRedemptionRecursive2(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromRewardRedemptionRecursive3(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromRewardRedemptionRecursive4(TypedDict, total=False):
    """Arguments for RewardRedemption"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyRewardRedemptionArgs = FindManyRewardRedemptionArgsFromRewardRedemption
FindFirstRewardRedemptionArgs = FindManyRewardRedemptionArgsFromRewardRedemption


    

class RewardRedemptionWhereInput(TypedDict, total=False):
    """RewardRedemption arguments for searching"""
    redemption_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    reward: 'RewardRelationFilter'
    reward_id: Union[_int, 'types.IntFilter']
    redemption_date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RewardRedemptionWhereInputRecursive1', List['RewardRedemptionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['RewardRedemptionWhereInputRecursive1']
    OR: List['RewardRedemptionWhereInputRecursive1']
    NOT: List['RewardRedemptionWhereInputRecursive1']


class RewardRedemptionWhereInputRecursive1(TypedDict, total=False):
    """RewardRedemption arguments for searching"""
    redemption_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    reward: 'RewardRelationFilter'
    reward_id: Union[_int, 'types.IntFilter']
    redemption_date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RewardRedemptionWhereInputRecursive2', List['RewardRedemptionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['RewardRedemptionWhereInputRecursive2']
    OR: List['RewardRedemptionWhereInputRecursive2']
    NOT: List['RewardRedemptionWhereInputRecursive2']


class RewardRedemptionWhereInputRecursive2(TypedDict, total=False):
    """RewardRedemption arguments for searching"""
    redemption_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    reward: 'RewardRelationFilter'
    reward_id: Union[_int, 'types.IntFilter']
    redemption_date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RewardRedemptionWhereInputRecursive3', List['RewardRedemptionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['RewardRedemptionWhereInputRecursive3']
    OR: List['RewardRedemptionWhereInputRecursive3']
    NOT: List['RewardRedemptionWhereInputRecursive3']


class RewardRedemptionWhereInputRecursive3(TypedDict, total=False):
    """RewardRedemption arguments for searching"""
    redemption_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    reward: 'RewardRelationFilter'
    reward_id: Union[_int, 'types.IntFilter']
    redemption_date: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RewardRedemptionWhereInputRecursive4', List['RewardRedemptionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['RewardRedemptionWhereInputRecursive4']
    OR: List['RewardRedemptionWhereInputRecursive4']
    NOT: List['RewardRedemptionWhereInputRecursive4']


class RewardRedemptionWhereInputRecursive4(TypedDict, total=False):
    """RewardRedemption arguments for searching"""
    redemption_id: Union[_int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    reward: 'RewardRelationFilter'
    reward_id: Union[_int, 'types.IntFilter']
    redemption_date: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate RewardRedemption types


    

class RewardRedemptionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """RewardRedemption arguments for searching"""
    redemption_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    reward_id: Union[_int, 'types.IntWithAggregatesFilter']
    redemption_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RewardRedemptionScalarWhereWithAggregatesInputRecursive1']
    OR: List['RewardRedemptionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['RewardRedemptionScalarWhereWithAggregatesInputRecursive1']


class RewardRedemptionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """RewardRedemption arguments for searching"""
    redemption_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    reward_id: Union[_int, 'types.IntWithAggregatesFilter']
    redemption_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RewardRedemptionScalarWhereWithAggregatesInputRecursive2']
    OR: List['RewardRedemptionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['RewardRedemptionScalarWhereWithAggregatesInputRecursive2']


class RewardRedemptionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """RewardRedemption arguments for searching"""
    redemption_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    reward_id: Union[_int, 'types.IntWithAggregatesFilter']
    redemption_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RewardRedemptionScalarWhereWithAggregatesInputRecursive3']
    OR: List['RewardRedemptionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['RewardRedemptionScalarWhereWithAggregatesInputRecursive3']


class RewardRedemptionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """RewardRedemption arguments for searching"""
    redemption_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    reward_id: Union[_int, 'types.IntWithAggregatesFilter']
    redemption_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RewardRedemptionScalarWhereWithAggregatesInputRecursive4']
    OR: List['RewardRedemptionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['RewardRedemptionScalarWhereWithAggregatesInputRecursive4']


class RewardRedemptionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """RewardRedemption arguments for searching"""
    redemption_id: Union[_int, 'types.IntWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    reward_id: Union[_int, 'types.IntWithAggregatesFilter']
    redemption_date: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class RewardRedemptionGroupByOutput(TypedDict, total=False):
    redemption_id: _int
    user_id: _int
    reward_id: _int
    redemption_date: datetime.datetime
    _sum: 'RewardRedemptionSumAggregateOutput'
    _avg: 'RewardRedemptionAvgAggregateOutput'
    _min: 'RewardRedemptionMinAggregateOutput'
    _max: 'RewardRedemptionMaxAggregateOutput'
    _count: 'RewardRedemptionCountAggregateOutput'


class RewardRedemptionAvgAggregateOutput(TypedDict, total=False):
    """RewardRedemption output for aggregating averages"""
    redemption_id: float
    user_id: float
    reward_id: float


class RewardRedemptionSumAggregateOutput(TypedDict, total=False):
    """RewardRedemption output for aggregating sums"""
    redemption_id: _int
    user_id: _int
    reward_id: _int


class RewardRedemptionScalarAggregateOutput(TypedDict, total=False):
    """RewardRedemption output including scalar fields"""
    redemption_id: _int
    user_id: _int
    reward_id: _int
    redemption_date: datetime.datetime


RewardRedemptionMinAggregateOutput = RewardRedemptionScalarAggregateOutput
RewardRedemptionMaxAggregateOutput = RewardRedemptionScalarAggregateOutput


class RewardRedemptionMaxAggregateInput(TypedDict, total=False):
    """RewardRedemption input for aggregating by max"""
    redemption_id: bool
    user_id: bool
    reward_id: bool
    redemption_date: bool


class RewardRedemptionMinAggregateInput(TypedDict, total=False):
    """RewardRedemption input for aggregating by min"""
    redemption_id: bool
    user_id: bool
    reward_id: bool
    redemption_date: bool


class RewardRedemptionNumberAggregateInput(TypedDict, total=False):
    """RewardRedemption input for aggregating numbers"""
    redemption_id: bool
    user_id: bool
    reward_id: bool


RewardRedemptionAvgAggregateInput = RewardRedemptionNumberAggregateInput
RewardRedemptionSumAggregateInput = RewardRedemptionNumberAggregateInput


RewardRedemptionCountAggregateInput = TypedDict(
    'RewardRedemptionCountAggregateInput',
    {
        'redemption_id': bool,
        'user_id': bool,
        'reward_id': bool,
        'redemption_date': bool,
        '_all': bool,
    },
    total=False,
)

RewardRedemptionCountAggregateOutput = TypedDict(
    'RewardRedemptionCountAggregateOutput',
    {
        'redemption_id': int,
        'user_id': int,
        'reward_id': int,
        'redemption_date': int,
        '_all': int,
    },
    total=False,
)


RewardRedemptionKeys = Literal[
    'redemption_id',
    'user',
    'user_id',
    'reward',
    'reward_id',
    'redemption_date',
]
RewardRedemptionScalarFieldKeys = Literal[
    'redemption_id',
    'user_id',
    'reward_id',
    'redemption_date',
]
RewardRedemptionScalarFieldKeysT = TypeVar('RewardRedemptionScalarFieldKeysT', bound=RewardRedemptionScalarFieldKeys)

RewardRedemptionRelationalFieldKeys = Literal[
        'user',
        'reward',
    ]

# Achievement types

class AchievementOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Achievement create method"""
    achievement_id: _int
    user_achievements: 'UserAchievementCreateManyNestedWithoutRelationsInput'


class AchievementCreateInput(AchievementOptionalCreateInput):
    """Required arguments to the Achievement create method"""
    name: _str
    description: _str
    coin_bonus: _int
    condition_type: 'enums.ConditionType'
    condition_value: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AchievementOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Achievement create method, without relations"""
    achievement_id: _int


class AchievementCreateWithoutRelationsInput(AchievementOptionalCreateWithoutRelationsInput):
    """Required arguments to the Achievement create method, without relations"""
    name: _str
    description: _str
    coin_bonus: _int
    condition_type: 'enums.ConditionType'
    condition_value: _int

class AchievementConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AchievementCreateWithoutRelationsInput'
    where: 'AchievementWhereUniqueInput'

class AchievementCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AchievementCreateWithoutRelationsInput'
    connect: 'AchievementWhereUniqueInput'
    connect_or_create: 'AchievementConnectOrCreateWithoutRelationsInput'


class AchievementCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AchievementCreateWithoutRelationsInput', List['AchievementCreateWithoutRelationsInput']]
    connect: Union['AchievementWhereUniqueInput', List['AchievementWhereUniqueInput']]
    connect_or_create: Union['AchievementConnectOrCreateWithoutRelationsInput', List['AchievementConnectOrCreateWithoutRelationsInput']]

_AchievementWhereUnique_achievement_id_Input = TypedDict(
    '_AchievementWhereUnique_achievement_id_Input',
    {
        'achievement_id': '_int',
    },
    total=True
)

AchievementWhereUniqueInput = _AchievementWhereUnique_achievement_id_Input


class AchievementUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    achievement_id: Union[AtomicIntInput, _int]
    name: _str
    description: _str
    coin_bonus: Union[AtomicIntInput, _int]
    condition_type: 'enums.ConditionType'
    condition_value: Union[AtomicIntInput, _int]
    user_achievements: 'UserAchievementUpdateManyWithoutRelationsInput'


class AchievementUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    achievement_id: Union[AtomicIntInput, _int]
    name: _str
    description: _str
    coin_bonus: Union[AtomicIntInput, _int]
    condition_type: 'enums.ConditionType'
    condition_value: Union[AtomicIntInput, _int]


class AchievementUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AchievementCreateWithoutRelationsInput']
    connect: List['AchievementWhereUniqueInput']
    connect_or_create: List['AchievementConnectOrCreateWithoutRelationsInput']
    set: List['AchievementWhereUniqueInput']
    disconnect: List['AchievementWhereUniqueInput']
    delete: List['AchievementWhereUniqueInput']

    # TODO
    # update: List['AchievementUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AchievementUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AchievementScalarWhereInput']
    # upsert: List['AchievementUpserteWithWhereUniqueWithoutRelationsInput']


class AchievementUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AchievementCreateWithoutRelationsInput'
    connect: 'AchievementWhereUniqueInput'
    connect_or_create: 'AchievementConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AchievementUpdateInput'
    # upsert: 'AchievementUpsertWithoutRelationsInput'


class AchievementUpsertInput(TypedDict):
    create: 'AchievementCreateInput'
    update: 'AchievementUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Achievement_achievement_id_OrderByInput = TypedDict(
    '_Achievement_achievement_id_OrderByInput',
    {
        'achievement_id': 'SortOrder',
    },
    total=True
)

_Achievement_name_OrderByInput = TypedDict(
    '_Achievement_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Achievement_description_OrderByInput = TypedDict(
    '_Achievement_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Achievement_coin_bonus_OrderByInput = TypedDict(
    '_Achievement_coin_bonus_OrderByInput',
    {
        'coin_bonus': 'SortOrder',
    },
    total=True
)

_Achievement_condition_type_OrderByInput = TypedDict(
    '_Achievement_condition_type_OrderByInput',
    {
        'condition_type': 'SortOrder',
    },
    total=True
)

_Achievement_condition_value_OrderByInput = TypedDict(
    '_Achievement_condition_value_OrderByInput',
    {
        'condition_value': 'SortOrder',
    },
    total=True
)

_Achievement_RelevanceInner = TypedDict(
    '_Achievement_RelevanceInner',
    {
        'fields': 'List[AchievementScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Achievement_RelevanceOrderByInput = TypedDict(
    '_Achievement_RelevanceOrderByInput',
    {
        '_relevance': '_Achievement_RelevanceInner',
    },
    total=True
)

AchievementOrderByInput = Union[
    '_Achievement_achievement_id_OrderByInput',
    '_Achievement_name_OrderByInput',
    '_Achievement_description_OrderByInput',
    '_Achievement_coin_bonus_OrderByInput',
    '_Achievement_condition_type_OrderByInput',
    '_Achievement_condition_value_OrderByInput',
    '_Achievement_RelevanceOrderByInput',
]



# recursive Achievement types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AchievementRelationFilter = TypedDict(
    'AchievementRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AchievementListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AchievementInclude(TypedDict, total=False):
    """Achievement relational arguments"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromAchievement']


    

class UserIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    todos: Union[bool, 'FindManyTodoArgsFromAchievementRecursive1']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromAchievementRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromAchievementRecursive1']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromAchievementRecursive1']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive1']


class UserIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    todos: Union[bool, 'FindManyTodoArgsFromAchievementRecursive2']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromAchievementRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromAchievementRecursive2']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromAchievementRecursive2']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive2']


class UserIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    todos: Union[bool, 'FindManyTodoArgsFromAchievementRecursive3']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromAchievementRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromAchievementRecursive3']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromAchievementRecursive3']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive3']


class UserIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    todos: Union[bool, 'FindManyTodoArgsFromAchievementRecursive4']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromAchievementRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromAchievementRecursive4']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromAchievementRecursive4']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive4']


class UserIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class UserArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyUserArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class TodoCategoryIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    todos: Union[bool, 'FindManyTodoArgsFromAchievementRecursive1']
    user: Union[bool, 'UserArgsFromAchievementRecursive1']


class TodoCategoryIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    todos: Union[bool, 'FindManyTodoArgsFromAchievementRecursive2']
    user: Union[bool, 'UserArgsFromAchievementRecursive2']


class TodoCategoryIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    todos: Union[bool, 'FindManyTodoArgsFromAchievementRecursive3']
    user: Union[bool, 'UserArgsFromAchievementRecursive3']


class TodoCategoryIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    todos: Union[bool, 'FindManyTodoArgsFromAchievementRecursive4']
    user: Union[bool, 'UserArgsFromAchievementRecursive4']


class TodoCategoryIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class TodoCategoryArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class TodoCategoryArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class TodoCategoryArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class TodoCategoryArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class TodoCategoryArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyTodoCategoryArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class FindManyTodoCategoryArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class FindManyTodoCategoryArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class FindManyTodoCategoryArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class FindManyTodoCategoryArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    
    

class TodoIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive1']
    category: Union[bool, 'TodoCategoryArgsFromAchievementRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromAchievementRecursive1']


class TodoIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive2']
    category: Union[bool, 'TodoCategoryArgsFromAchievementRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromAchievementRecursive2']


class TodoIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive3']
    category: Union[bool, 'TodoCategoryArgsFromAchievementRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromAchievementRecursive3']


class TodoIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive4']
    category: Union[bool, 'TodoCategoryArgsFromAchievementRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromAchievementRecursive4']


class TodoIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class TodoArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TodoIncludeFromTodoRecursive1'


class TodoArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TodoIncludeFromTodoRecursive2'


class TodoArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TodoIncludeFromTodoRecursive3'


class TodoArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'TodoIncludeFromTodoRecursive4'


class TodoArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyTodoArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive1'


class FindManyTodoArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive2'


class FindManyTodoArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive3'


class FindManyTodoArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive4'


class FindManyTodoArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    
    

class CoinTransactionIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive1']
    related_todo: Union[bool, 'TodoArgsFromAchievementRecursive1']


class CoinTransactionIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive2']
    related_todo: Union[bool, 'TodoArgsFromAchievementRecursive2']


class CoinTransactionIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive3']
    related_todo: Union[bool, 'TodoArgsFromAchievementRecursive3']


class CoinTransactionIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive4']
    related_todo: Union[bool, 'TodoArgsFromAchievementRecursive4']


class CoinTransactionIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class CoinTransactionArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class CoinTransactionArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class CoinTransactionArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class CoinTransactionArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class CoinTransactionArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyCoinTransactionArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class FindManyCoinTransactionArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class FindManyCoinTransactionArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class FindManyCoinTransactionArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class FindManyCoinTransactionArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    
    

class RewardIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromAchievementRecursive1']


class RewardIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromAchievementRecursive2']


class RewardIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromAchievementRecursive3']


class RewardIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromAchievementRecursive4']


class RewardIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class RewardArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'RewardIncludeFromRewardRecursive1'


class RewardArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'RewardIncludeFromRewardRecursive2'


class RewardArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'RewardIncludeFromRewardRecursive3'


class RewardArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'RewardIncludeFromRewardRecursive4'


class RewardArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyRewardArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive1'


class FindManyRewardArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive2'


class FindManyRewardArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive3'


class FindManyRewardArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive4'


class FindManyRewardArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    
    

class RewardRedemptionIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive1']
    reward: Union[bool, 'RewardArgsFromAchievementRecursive1']


class RewardRedemptionIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive2']
    reward: Union[bool, 'RewardArgsFromAchievementRecursive2']


class RewardRedemptionIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive3']
    reward: Union[bool, 'RewardArgsFromAchievementRecursive3']


class RewardRedemptionIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive4']
    reward: Union[bool, 'RewardArgsFromAchievementRecursive4']


class RewardRedemptionIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class RewardRedemptionArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class RewardRedemptionArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class RewardRedemptionArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class RewardRedemptionArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class RewardRedemptionArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyRewardRedemptionArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class FindManyRewardRedemptionArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class FindManyRewardRedemptionArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class FindManyRewardRedemptionArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class FindManyRewardRedemptionArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    
    

class AchievementIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive1']


class AchievementIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive2']


class AchievementIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive3']


class AchievementIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromAchievementRecursive4']


class AchievementIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class AchievementArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyAchievementArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromAchievement(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive1']
    achievement: Union[bool, 'AchievementArgsFromAchievementRecursive1']


class UserAchievementIncludeFromAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive2']
    achievement: Union[bool, 'AchievementArgsFromAchievementRecursive2']


class UserAchievementIncludeFromAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive3']
    achievement: Union[bool, 'AchievementArgsFromAchievementRecursive3']


class UserAchievementIncludeFromAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for Achievement"""
    user: Union[bool, 'UserArgsFromAchievementRecursive4']
    achievement: Union[bool, 'AchievementArgsFromAchievementRecursive4']


class UserAchievementIncludeFromAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for Achievement"""

    

class UserAchievementArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    
    

class FindManyUserAchievementArgsFromAchievement(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromAchievementRecursive1(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromAchievementRecursive2(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromAchievementRecursive3(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromAchievementRecursive4(TypedDict, total=False):
    """Arguments for Achievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyAchievementArgs = FindManyAchievementArgsFromAchievement
FindFirstAchievementArgs = FindManyAchievementArgsFromAchievement


    

class AchievementWhereInput(TypedDict, total=False):
    """Achievement arguments for searching"""
    achievement_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    coin_bonus: Union[_int, 'types.IntFilter']
    condition_type: 'enums.ConditionType'
    condition_value: Union[_int, 'types.IntFilter']
    user_achievements: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['AchievementWhereInputRecursive1', List['AchievementWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AchievementWhereInputRecursive1']
    OR: List['AchievementWhereInputRecursive1']
    NOT: List['AchievementWhereInputRecursive1']


class AchievementWhereInputRecursive1(TypedDict, total=False):
    """Achievement arguments for searching"""
    achievement_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    coin_bonus: Union[_int, 'types.IntFilter']
    condition_type: 'enums.ConditionType'
    condition_value: Union[_int, 'types.IntFilter']
    user_achievements: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['AchievementWhereInputRecursive2', List['AchievementWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AchievementWhereInputRecursive2']
    OR: List['AchievementWhereInputRecursive2']
    NOT: List['AchievementWhereInputRecursive2']


class AchievementWhereInputRecursive2(TypedDict, total=False):
    """Achievement arguments for searching"""
    achievement_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    coin_bonus: Union[_int, 'types.IntFilter']
    condition_type: 'enums.ConditionType'
    condition_value: Union[_int, 'types.IntFilter']
    user_achievements: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['AchievementWhereInputRecursive3', List['AchievementWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AchievementWhereInputRecursive3']
    OR: List['AchievementWhereInputRecursive3']
    NOT: List['AchievementWhereInputRecursive3']


class AchievementWhereInputRecursive3(TypedDict, total=False):
    """Achievement arguments for searching"""
    achievement_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    coin_bonus: Union[_int, 'types.IntFilter']
    condition_type: 'enums.ConditionType'
    condition_value: Union[_int, 'types.IntFilter']
    user_achievements: 'UserAchievementListRelationFilter'

    # should be noted that AND and NOT should be Union['AchievementWhereInputRecursive4', List['AchievementWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AchievementWhereInputRecursive4']
    OR: List['AchievementWhereInputRecursive4']
    NOT: List['AchievementWhereInputRecursive4']


class AchievementWhereInputRecursive4(TypedDict, total=False):
    """Achievement arguments for searching"""
    achievement_id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    coin_bonus: Union[_int, 'types.IntFilter']
    condition_type: 'enums.ConditionType'
    condition_value: Union[_int, 'types.IntFilter']
    user_achievements: 'UserAchievementListRelationFilter'



# aggregate Achievement types


    

class AchievementScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Achievement arguments for searching"""
    achievement_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coin_bonus: Union[_int, 'types.IntWithAggregatesFilter']
    condition_type: 'enums.ConditionType'
    condition_value: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['AchievementScalarWhereWithAggregatesInputRecursive1']
    OR: List['AchievementScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AchievementScalarWhereWithAggregatesInputRecursive1']


class AchievementScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Achievement arguments for searching"""
    achievement_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coin_bonus: Union[_int, 'types.IntWithAggregatesFilter']
    condition_type: 'enums.ConditionType'
    condition_value: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['AchievementScalarWhereWithAggregatesInputRecursive2']
    OR: List['AchievementScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AchievementScalarWhereWithAggregatesInputRecursive2']


class AchievementScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Achievement arguments for searching"""
    achievement_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coin_bonus: Union[_int, 'types.IntWithAggregatesFilter']
    condition_type: 'enums.ConditionType'
    condition_value: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['AchievementScalarWhereWithAggregatesInputRecursive3']
    OR: List['AchievementScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AchievementScalarWhereWithAggregatesInputRecursive3']


class AchievementScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Achievement arguments for searching"""
    achievement_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coin_bonus: Union[_int, 'types.IntWithAggregatesFilter']
    condition_type: 'enums.ConditionType'
    condition_value: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['AchievementScalarWhereWithAggregatesInputRecursive4']
    OR: List['AchievementScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AchievementScalarWhereWithAggregatesInputRecursive4']


class AchievementScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Achievement arguments for searching"""
    achievement_id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    coin_bonus: Union[_int, 'types.IntWithAggregatesFilter']
    condition_type: 'enums.ConditionType'
    condition_value: Union[_int, 'types.IntWithAggregatesFilter']



class AchievementGroupByOutput(TypedDict, total=False):
    achievement_id: _int
    name: _str
    description: _str
    coin_bonus: _int
    condition_type: 'enums.ConditionType'
    condition_value: _int
    _sum: 'AchievementSumAggregateOutput'
    _avg: 'AchievementAvgAggregateOutput'
    _min: 'AchievementMinAggregateOutput'
    _max: 'AchievementMaxAggregateOutput'
    _count: 'AchievementCountAggregateOutput'


class AchievementAvgAggregateOutput(TypedDict, total=False):
    """Achievement output for aggregating averages"""
    achievement_id: float
    coin_bonus: float
    condition_value: float


class AchievementSumAggregateOutput(TypedDict, total=False):
    """Achievement output for aggregating sums"""
    achievement_id: _int
    coin_bonus: _int
    condition_value: _int


class AchievementScalarAggregateOutput(TypedDict, total=False):
    """Achievement output including scalar fields"""
    achievement_id: _int
    name: _str
    description: _str
    coin_bonus: _int
    condition_type: 'enums.ConditionType'
    condition_value: _int


AchievementMinAggregateOutput = AchievementScalarAggregateOutput
AchievementMaxAggregateOutput = AchievementScalarAggregateOutput


class AchievementMaxAggregateInput(TypedDict, total=False):
    """Achievement input for aggregating by max"""
    achievement_id: bool
    name: bool
    description: bool
    coin_bonus: bool
    condition_type: bool
    condition_value: bool


class AchievementMinAggregateInput(TypedDict, total=False):
    """Achievement input for aggregating by min"""
    achievement_id: bool
    name: bool
    description: bool
    coin_bonus: bool
    condition_type: bool
    condition_value: bool


class AchievementNumberAggregateInput(TypedDict, total=False):
    """Achievement input for aggregating numbers"""
    achievement_id: bool
    coin_bonus: bool
    condition_value: bool


AchievementAvgAggregateInput = AchievementNumberAggregateInput
AchievementSumAggregateInput = AchievementNumberAggregateInput


AchievementCountAggregateInput = TypedDict(
    'AchievementCountAggregateInput',
    {
        'achievement_id': bool,
        'name': bool,
        'description': bool,
        'coin_bonus': bool,
        'condition_type': bool,
        'condition_value': bool,
        '_all': bool,
    },
    total=False,
)

AchievementCountAggregateOutput = TypedDict(
    'AchievementCountAggregateOutput',
    {
        'achievement_id': int,
        'name': int,
        'description': int,
        'coin_bonus': int,
        'condition_type': int,
        'condition_value': int,
        '_all': int,
    },
    total=False,
)


AchievementKeys = Literal[
    'achievement_id',
    'name',
    'description',
    'coin_bonus',
    'condition_type',
    'condition_value',
    'user_achievements',
]
AchievementScalarFieldKeys = Literal[
    'achievement_id',
    'name',
    'description',
    'coin_bonus',
    'condition_type',
    'condition_value',
]
AchievementScalarFieldKeysT = TypeVar('AchievementScalarFieldKeysT', bound=AchievementScalarFieldKeys)

AchievementRelationalFieldKeys = Literal[
        'user_achievements',
    ]

# UserAchievement types

class UserAchievementOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserAchievement create method"""
    user: 'UserCreateNestedWithoutRelationsInput'
    user_id: _int
    achievement: 'AchievementCreateNestedWithoutRelationsInput'
    achievement_id: _int
    unlocked_at: datetime.datetime


class UserAchievementCreateInput(UserAchievementOptionalCreateInput):
    """Required arguments to the UserAchievement create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserAchievementOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserAchievement create method, without relations"""
    user_id: _int
    achievement_id: _int
    unlocked_at: datetime.datetime


class UserAchievementCreateWithoutRelationsInput(UserAchievementOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserAchievement create method, without relations"""

class UserAchievementConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserAchievementCreateWithoutRelationsInput'
    where: 'UserAchievementWhereUniqueInput'

class UserAchievementCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserAchievementCreateWithoutRelationsInput'
    connect: 'UserAchievementWhereUniqueInput'
    connect_or_create: 'UserAchievementConnectOrCreateWithoutRelationsInput'


class UserAchievementCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserAchievementCreateWithoutRelationsInput', List['UserAchievementCreateWithoutRelationsInput']]
    connect: Union['UserAchievementWhereUniqueInput', List['UserAchievementWhereUniqueInput']]
    connect_or_create: Union['UserAchievementConnectOrCreateWithoutRelationsInput', List['UserAchievementConnectOrCreateWithoutRelationsInput']]

_UserAchievementCompoundPrimaryKeyInner = TypedDict(
    '_UserAchievementCompoundPrimaryKeyInner',
    {
        'user_id': '_int',
        'achievement_id': '_int',
    },
    total=True
)

_UserAchievementCompoundPrimaryKey = TypedDict(
    '_UserAchievementCompoundPrimaryKey',
    {
        'user_id_achievement_id': '_UserAchievementCompoundPrimaryKeyInner',
    },
    total=True
)

UserAchievementWhereUniqueInput = _UserAchievementCompoundPrimaryKey


class UserAchievementUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    user: 'UserUpdateOneWithoutRelationsInput'
    achievement: 'AchievementUpdateOneWithoutRelationsInput'
    unlocked_at: datetime.datetime


class UserAchievementUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    unlocked_at: datetime.datetime


class UserAchievementUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserAchievementCreateWithoutRelationsInput']
    connect: List['UserAchievementWhereUniqueInput']
    connect_or_create: List['UserAchievementConnectOrCreateWithoutRelationsInput']
    set: List['UserAchievementWhereUniqueInput']
    disconnect: List['UserAchievementWhereUniqueInput']
    delete: List['UserAchievementWhereUniqueInput']

    # TODO
    # update: List['UserAchievementUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserAchievementUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserAchievementScalarWhereInput']
    # upsert: List['UserAchievementUpserteWithWhereUniqueWithoutRelationsInput']


class UserAchievementUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserAchievementCreateWithoutRelationsInput'
    connect: 'UserAchievementWhereUniqueInput'
    connect_or_create: 'UserAchievementConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserAchievementUpdateInput'
    # upsert: 'UserAchievementUpsertWithoutRelationsInput'


class UserAchievementUpsertInput(TypedDict):
    create: 'UserAchievementCreateInput'
    update: 'UserAchievementUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserAchievement_user_id_OrderByInput = TypedDict(
    '_UserAchievement_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_UserAchievement_achievement_id_OrderByInput = TypedDict(
    '_UserAchievement_achievement_id_OrderByInput',
    {
        'achievement_id': 'SortOrder',
    },
    total=True
)

_UserAchievement_unlocked_at_OrderByInput = TypedDict(
    '_UserAchievement_unlocked_at_OrderByInput',
    {
        'unlocked_at': 'SortOrder',
    },
    total=True
)

_UserAchievement_RelevanceInner = TypedDict(
    '_UserAchievement_RelevanceInner',
    {
        'fields': 'List[UserAchievementScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserAchievement_RelevanceOrderByInput = TypedDict(
    '_UserAchievement_RelevanceOrderByInput',
    {
        '_relevance': '_UserAchievement_RelevanceInner',
    },
    total=True
)

UserAchievementOrderByInput = Union[
    '_UserAchievement_user_id_OrderByInput',
    '_UserAchievement_achievement_id_OrderByInput',
    '_UserAchievement_unlocked_at_OrderByInput',
    '_UserAchievement_RelevanceOrderByInput',
]



# recursive UserAchievement types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserAchievementRelationFilter = TypedDict(
    'UserAchievementRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserAchievementListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserAchievementInclude(TypedDict, total=False):
    """UserAchievement relational arguments"""
    user: Union[bool, 'UserArgsFromUserAchievement']
    achievement: Union[bool, 'AchievementArgsFromUserAchievement']


    

class UserIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    todos: Union[bool, 'FindManyTodoArgsFromUserAchievementRecursive1']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromUserAchievementRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserAchievementRecursive1']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserAchievementRecursive1']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive1']


class UserIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    todos: Union[bool, 'FindManyTodoArgsFromUserAchievementRecursive2']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromUserAchievementRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserAchievementRecursive2']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserAchievementRecursive2']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive2']


class UserIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    todos: Union[bool, 'FindManyTodoArgsFromUserAchievementRecursive3']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromUserAchievementRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserAchievementRecursive3']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserAchievementRecursive3']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive3']


class UserIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    todos: Union[bool, 'FindManyTodoArgsFromUserAchievementRecursive4']
    Todo_categories: Union[bool, 'FindManyTodoCategoryArgsFromUserAchievementRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserAchievementRecursive4']
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserAchievementRecursive4']
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive4']


class UserIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class UserArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyUserArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class TodoCategoryIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    todos: Union[bool, 'FindManyTodoArgsFromUserAchievementRecursive1']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']


class TodoCategoryIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    todos: Union[bool, 'FindManyTodoArgsFromUserAchievementRecursive2']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']


class TodoCategoryIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    todos: Union[bool, 'FindManyTodoArgsFromUserAchievementRecursive3']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']


class TodoCategoryIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    todos: Union[bool, 'FindManyTodoArgsFromUserAchievementRecursive4']
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']


class TodoCategoryIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class TodoCategoryArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class TodoCategoryArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class TodoCategoryArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class TodoCategoryArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class TodoCategoryArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyTodoCategoryArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive1'


class FindManyTodoCategoryArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive2'


class FindManyTodoCategoryArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive3'


class FindManyTodoCategoryArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    include: 'TodoCategoryIncludeFromTodoCategoryRecursive4'


class FindManyTodoCategoryArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TodoCategoryOrderByInput', List['TodoCategoryOrderByInput']]
    where: 'TodoCategoryWhereInput'
    cursor: 'TodoCategoryWhereUniqueInput'
    distinct: List['TodoCategoryScalarFieldKeys']
    
    

class TodoIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']
    category: Union[bool, 'TodoCategoryArgsFromUserAchievementRecursive1']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserAchievementRecursive1']


class TodoIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']
    category: Union[bool, 'TodoCategoryArgsFromUserAchievementRecursive2']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserAchievementRecursive2']


class TodoIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']
    category: Union[bool, 'TodoCategoryArgsFromUserAchievementRecursive3']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserAchievementRecursive3']


class TodoIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']
    category: Union[bool, 'TodoCategoryArgsFromUserAchievementRecursive4']
    coin_transactions: Union[bool, 'FindManyCoinTransactionArgsFromUserAchievementRecursive4']


class TodoIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class TodoArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'TodoIncludeFromTodoRecursive1'


class TodoArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'TodoIncludeFromTodoRecursive2'


class TodoArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'TodoIncludeFromTodoRecursive3'


class TodoArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'TodoIncludeFromTodoRecursive4'


class TodoArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyTodoArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive1'


class FindManyTodoArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive2'


class FindManyTodoArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive3'


class FindManyTodoArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    include: 'TodoIncludeFromTodoRecursive4'


class FindManyTodoArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['TodoOrderByInput', List['TodoOrderByInput']]
    where: 'TodoWhereInput'
    cursor: 'TodoWhereUniqueInput'
    distinct: List['TodoScalarFieldKeys']
    
    

class CoinTransactionIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']
    related_todo: Union[bool, 'TodoArgsFromUserAchievementRecursive1']


class CoinTransactionIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']
    related_todo: Union[bool, 'TodoArgsFromUserAchievementRecursive2']


class CoinTransactionIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']
    related_todo: Union[bool, 'TodoArgsFromUserAchievementRecursive3']


class CoinTransactionIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']
    related_todo: Union[bool, 'TodoArgsFromUserAchievementRecursive4']


class CoinTransactionIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class CoinTransactionArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class CoinTransactionArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class CoinTransactionArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class CoinTransactionArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class CoinTransactionArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyCoinTransactionArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive1'


class FindManyCoinTransactionArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive2'


class FindManyCoinTransactionArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive3'


class FindManyCoinTransactionArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    include: 'CoinTransactionIncludeFromCoinTransactionRecursive4'


class FindManyCoinTransactionArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['CoinTransactionOrderByInput', List['CoinTransactionOrderByInput']]
    where: 'CoinTransactionWhereInput'
    cursor: 'CoinTransactionWhereUniqueInput'
    distinct: List['CoinTransactionScalarFieldKeys']
    
    

class RewardIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserAchievementRecursive1']


class RewardIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserAchievementRecursive2']


class RewardIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserAchievementRecursive3']


class RewardIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    reward_redemptions: Union[bool, 'FindManyRewardRedemptionArgsFromUserAchievementRecursive4']


class RewardIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class RewardArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'RewardIncludeFromRewardRecursive1'


class RewardArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'RewardIncludeFromRewardRecursive2'


class RewardArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'RewardIncludeFromRewardRecursive3'


class RewardArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'RewardIncludeFromRewardRecursive4'


class RewardArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyRewardArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive1'


class FindManyRewardArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive2'


class FindManyRewardArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive3'


class FindManyRewardArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    include: 'RewardIncludeFromRewardRecursive4'


class FindManyRewardArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['RewardOrderByInput', List['RewardOrderByInput']]
    where: 'RewardWhereInput'
    cursor: 'RewardWhereUniqueInput'
    distinct: List['RewardScalarFieldKeys']
    
    

class RewardRedemptionIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']
    reward: Union[bool, 'RewardArgsFromUserAchievementRecursive1']


class RewardRedemptionIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']
    reward: Union[bool, 'RewardArgsFromUserAchievementRecursive2']


class RewardRedemptionIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']
    reward: Union[bool, 'RewardArgsFromUserAchievementRecursive3']


class RewardRedemptionIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']
    reward: Union[bool, 'RewardArgsFromUserAchievementRecursive4']


class RewardRedemptionIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class RewardRedemptionArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class RewardRedemptionArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class RewardRedemptionArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class RewardRedemptionArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class RewardRedemptionArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyRewardRedemptionArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive1'


class FindManyRewardRedemptionArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive2'


class FindManyRewardRedemptionArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive3'


class FindManyRewardRedemptionArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    include: 'RewardRedemptionIncludeFromRewardRedemptionRecursive4'


class FindManyRewardRedemptionArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['RewardRedemptionOrderByInput', List['RewardRedemptionOrderByInput']]
    where: 'RewardRedemptionWhereInput'
    cursor: 'RewardRedemptionWhereUniqueInput'
    distinct: List['RewardRedemptionScalarFieldKeys']
    
    

class AchievementIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive1']


class AchievementIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive2']


class AchievementIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive3']


class AchievementIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user_achievements: Union[bool, 'FindManyUserAchievementArgsFromUserAchievementRecursive4']


class AchievementIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class AchievementArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AchievementIncludeFromAchievementRecursive1'


class AchievementArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AchievementIncludeFromAchievementRecursive2'


class AchievementArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AchievementIncludeFromAchievementRecursive3'


class AchievementArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'AchievementIncludeFromAchievementRecursive4'


class AchievementArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyAchievementArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive1'


class FindManyAchievementArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive2'


class FindManyAchievementArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive3'


class FindManyAchievementArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    include: 'AchievementIncludeFromAchievementRecursive4'


class FindManyAchievementArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['AchievementOrderByInput', List['AchievementOrderByInput']]
    where: 'AchievementWhereInput'
    cursor: 'AchievementWhereUniqueInput'
    distinct: List['AchievementScalarFieldKeys']
    
    

class UserAchievementIncludeFromUserAchievement(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive1']
    achievement: Union[bool, 'AchievementArgsFromUserAchievementRecursive1']


class UserAchievementIncludeFromUserAchievementRecursive1(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive2']
    achievement: Union[bool, 'AchievementArgsFromUserAchievementRecursive2']


class UserAchievementIncludeFromUserAchievementRecursive2(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive3']
    achievement: Union[bool, 'AchievementArgsFromUserAchievementRecursive3']


class UserAchievementIncludeFromUserAchievementRecursive3(TypedDict, total=False):
    """Relational arguments for UserAchievement"""
    user: Union[bool, 'UserArgsFromUserAchievementRecursive4']
    achievement: Union[bool, 'AchievementArgsFromUserAchievementRecursive4']


class UserAchievementIncludeFromUserAchievementRecursive4(TypedDict, total=False):
    """Relational arguments for UserAchievement"""

    

class UserAchievementArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class UserAchievementArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class UserAchievementArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class UserAchievementArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class UserAchievementArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    
    

class FindManyUserAchievementArgsFromUserAchievement(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive1'


class FindManyUserAchievementArgsFromUserAchievementRecursive1(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive2'


class FindManyUserAchievementArgsFromUserAchievementRecursive2(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive3'


class FindManyUserAchievementArgsFromUserAchievementRecursive3(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    include: 'UserAchievementIncludeFromUserAchievementRecursive4'


class FindManyUserAchievementArgsFromUserAchievementRecursive4(TypedDict, total=False):
    """Arguments for UserAchievement"""
    take: int
    skip: int
    order_by: Union['UserAchievementOrderByInput', List['UserAchievementOrderByInput']]
    where: 'UserAchievementWhereInput'
    cursor: 'UserAchievementWhereUniqueInput'
    distinct: List['UserAchievementScalarFieldKeys']
    


FindManyUserAchievementArgs = FindManyUserAchievementArgsFromUserAchievement
FindFirstUserAchievementArgs = FindManyUserAchievementArgsFromUserAchievement


    

class UserAchievementWhereInput(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    achievement: 'AchievementRelationFilter'
    achievement_id: Union[_int, 'types.IntFilter']
    unlocked_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserAchievementWhereInputRecursive1', List['UserAchievementWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserAchievementWhereInputRecursive1']
    OR: List['UserAchievementWhereInputRecursive1']
    NOT: List['UserAchievementWhereInputRecursive1']


class UserAchievementWhereInputRecursive1(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    achievement: 'AchievementRelationFilter'
    achievement_id: Union[_int, 'types.IntFilter']
    unlocked_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserAchievementWhereInputRecursive2', List['UserAchievementWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserAchievementWhereInputRecursive2']
    OR: List['UserAchievementWhereInputRecursive2']
    NOT: List['UserAchievementWhereInputRecursive2']


class UserAchievementWhereInputRecursive2(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    achievement: 'AchievementRelationFilter'
    achievement_id: Union[_int, 'types.IntFilter']
    unlocked_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserAchievementWhereInputRecursive3', List['UserAchievementWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserAchievementWhereInputRecursive3']
    OR: List['UserAchievementWhereInputRecursive3']
    NOT: List['UserAchievementWhereInputRecursive3']


class UserAchievementWhereInputRecursive3(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    achievement: 'AchievementRelationFilter'
    achievement_id: Union[_int, 'types.IntFilter']
    unlocked_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['UserAchievementWhereInputRecursive4', List['UserAchievementWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserAchievementWhereInputRecursive4']
    OR: List['UserAchievementWhereInputRecursive4']
    NOT: List['UserAchievementWhereInputRecursive4']


class UserAchievementWhereInputRecursive4(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    achievement: 'AchievementRelationFilter'
    achievement_id: Union[_int, 'types.IntFilter']
    unlocked_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate UserAchievement types


    

class UserAchievementScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    achievement_id: Union[_int, 'types.IntWithAggregatesFilter']
    unlocked_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserAchievementScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserAchievementScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserAchievementScalarWhereWithAggregatesInputRecursive1']


class UserAchievementScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    achievement_id: Union[_int, 'types.IntWithAggregatesFilter']
    unlocked_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserAchievementScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserAchievementScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserAchievementScalarWhereWithAggregatesInputRecursive2']


class UserAchievementScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    achievement_id: Union[_int, 'types.IntWithAggregatesFilter']
    unlocked_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserAchievementScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserAchievementScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserAchievementScalarWhereWithAggregatesInputRecursive3']


class UserAchievementScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    achievement_id: Union[_int, 'types.IntWithAggregatesFilter']
    unlocked_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserAchievementScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserAchievementScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserAchievementScalarWhereWithAggregatesInputRecursive4']


class UserAchievementScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserAchievement arguments for searching"""
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    achievement_id: Union[_int, 'types.IntWithAggregatesFilter']
    unlocked_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserAchievementGroupByOutput(TypedDict, total=False):
    user_id: _int
    achievement_id: _int
    unlocked_at: datetime.datetime
    _sum: 'UserAchievementSumAggregateOutput'
    _avg: 'UserAchievementAvgAggregateOutput'
    _min: 'UserAchievementMinAggregateOutput'
    _max: 'UserAchievementMaxAggregateOutput'
    _count: 'UserAchievementCountAggregateOutput'


class UserAchievementAvgAggregateOutput(TypedDict, total=False):
    """UserAchievement output for aggregating averages"""
    user_id: float
    achievement_id: float


class UserAchievementSumAggregateOutput(TypedDict, total=False):
    """UserAchievement output for aggregating sums"""
    user_id: _int
    achievement_id: _int


class UserAchievementScalarAggregateOutput(TypedDict, total=False):
    """UserAchievement output including scalar fields"""
    user_id: _int
    achievement_id: _int
    unlocked_at: datetime.datetime


UserAchievementMinAggregateOutput = UserAchievementScalarAggregateOutput
UserAchievementMaxAggregateOutput = UserAchievementScalarAggregateOutput


class UserAchievementMaxAggregateInput(TypedDict, total=False):
    """UserAchievement input for aggregating by max"""
    user_id: bool
    achievement_id: bool
    unlocked_at: bool


class UserAchievementMinAggregateInput(TypedDict, total=False):
    """UserAchievement input for aggregating by min"""
    user_id: bool
    achievement_id: bool
    unlocked_at: bool


class UserAchievementNumberAggregateInput(TypedDict, total=False):
    """UserAchievement input for aggregating numbers"""
    user_id: bool
    achievement_id: bool


UserAchievementAvgAggregateInput = UserAchievementNumberAggregateInput
UserAchievementSumAggregateInput = UserAchievementNumberAggregateInput


UserAchievementCountAggregateInput = TypedDict(
    'UserAchievementCountAggregateInput',
    {
        'user_id': bool,
        'achievement_id': bool,
        'unlocked_at': bool,
        '_all': bool,
    },
    total=False,
)

UserAchievementCountAggregateOutput = TypedDict(
    'UserAchievementCountAggregateOutput',
    {
        'user_id': int,
        'achievement_id': int,
        'unlocked_at': int,
        '_all': int,
    },
    total=False,
)


UserAchievementKeys = Literal[
    'user',
    'user_id',
    'achievement',
    'achievement_id',
    'unlocked_at',
]
UserAchievementScalarFieldKeys = Literal[
    'user_id',
    'achievement_id',
    'unlocked_at',
]
UserAchievementScalarFieldKeysT = TypeVar('UserAchievementScalarFieldKeysT', bound=UserAchievementScalarFieldKeys)

UserAchievementRelationalFieldKeys = Literal[
        'user',
        'achievement',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields